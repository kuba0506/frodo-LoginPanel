{"version":3,"names":[],"mappings":"","sources":["jquery.frodo.js"],"sourcesContent":["/**\n * Frodo.js v.1.4 - Multiprovider login panel\n * Copyright (c) 2015, Jakub Jurczyñski\n *\n * To initialise plugin just add data-login attribute to any html element\n * $([data-login]).frodo();\n * To fire at page load use:\n * $([data-login]).frodo().trigger('click');\n */\n;\n(function ($) {\n    'use strict';\n    var xxx = 'qweqwe';\n    /*\n    DEFAULT PLUGIN SETTINGS\n     */\n    var defaults = {\n        lang: 'en',\n        version: 'basic',\n        provider: ['linkedin', 'facebook', 'google'],\n        device: 'desktop',\n        clientId: '',\n        redirectUri: '/',\n        scope: ''\n    };\n    /*\n    MAIN CONFIG\n     */\n    var frodoConfig = {\n        //State values\n        currentForm: null,\n        forms: ['login', 'signup', 'reset'],\n        //Classes and ids\n        body: 'body',\n        frodoWrapper: 'frodo-wrapper',\n        frodo: 'frodo',\n        frodoOverlay: 'frodo-overlay',\n        frodoForm: 'frodo-form',\n        frodoHeader: {\n            header: 'frodo-header',\n            text: 'frodo-header-txt',\n            closeBtn: 'frodo-btn-close'\n        },\n        frodoLogin: {\n            box: 'frodo-login-box',\n            message: 'frodo-message',\n            messageAlert: 'frodo-message-alert',\n            messageSuccess: 'frodo-message-success',\n            frodoProvider: 'frodo-provider',\n            frodoProviderMobile: 'frodo-provider-mobile',\n            input: 'frodo-input',\n            inputWrapper: 'frodo-input-wrapper',\n            inputError: 'frodo-err-msg',\n            footer: 'frodo-login-footer',\n            linksWrapper: 'frodo-links',\n            forgot: 'frodo-forgot',\n            signUp: 'frodo-sign-up',\n            submit: 'frodo-btn-submit'\n        },\n        log: 'frodo-log-with',\n        social: 'frodo-social',\n        //Helpers\n        frodoVisible: 'frodo-visible',\n        hideClass: 'frodo-hide',\n        noScroll: 'frodo-no-scroll',\n        //Error class\n        errorClass: {\n            input: 'frodo-err-input',\n            msg: 'frodo-err-msg'\n        },\n        //Form settings\n        method: 'get',\n        submitUrl: '?',\n        forgotLink: '#',\n        signUpLink: '#'\n    };\n    /*\n    TRANSLATIONS\n     */\n    var translation = {\n        'en': {\n            loginTxt: 'Log in',\n            signUpTxt: 'Sign up',\n            resetTxt: 'Password Reset',\n            userPlaceholder: 'Fullname',\n            passPlaceholder: 'Password',\n            passConfirmPlaceholder: 'Confirm password',\n            emailPlaceholder: 'Email',\n            emailResetPlaceholder: 'Your email address',\n            links: ['Forgot your password ?', 'Sign up now', 'Log in now'],\n            login: 'Submit',\n            logWith: 'or',\n            //Errors\n            errors: {\n                email: 'Invalid email address format',\n                password: 'Password should be at least 8 characters',\n                passwordNotMatch: 'Passwords don\\'t match',\n                fullname: 'Invalid username'\n            }\n        },\n        'se': {\n            loginTxt: 'Logga in',\n            signUpTxt: 'Skapa nytt konto',\n            resetTxt: 'E-postadress Återställning',\n            userPlaceholder: 'För och efternamn',\n            passPlaceholder: 'Lösenord',\n            passConfirmPlaceholder: 'Bekräfta lösenord',\n            emailPlaceholder: 'E-postadress',\n            emailResetPlaceholder: 'Din E-postadress',\n            links: ['Glömt lösenord?', 'Skapa nytt konto', 'Logga in'],\n            login: 'Skicka',\n            logWith: 'eller',\n            //Errors\n            errors: {\n                email: 'Ogiltig E-mailadress',\n                password: 'Lösenord skall innehålla minst åtta tecken',\n                passwordNotMatch: 'De använda lösernorden stämmer inte med varandra',\n                fullname: 'Ogiltigt användarnamn'\n            }\n        },\n        'dk': {\n            loginTxt: 'Log ind',\n            signUpTxt: 'Opret ny konto',\n            resetTxt: 'Nulstil adgangskode',\n            userPlaceholder: 'For-og efternavn',\n            passPlaceholder: 'Adgangskode',\n            passConfirmPlaceholder: 'Bekræft adgangskode',\n            emailPlaceholder: 'Mailadresse',\n            emailResetPlaceholder: 'Din mailadresse',\n            links: ['Glemt adgangskode?', 'Opret ny konto', 'Log ind'],\n            login: 'Send',\n            logWith: 'eller',\n            //Errors\n            errors: {\n                email: 'Ugyldig mailadresse',\n                password: 'Adgangskode skal indeholde mindst otte tegn',\n                passwordNotMatch: 'De indtastede adgangskoder er ikke ens',\n                fullname: 'Ugyldigt brugernavn'\n            }\n        },\n        'no': {\n            loginTxt: 'Logg inn',\n            signUpTxt: 'Opprett ny konto',\n            resetTxt: 'Nullstill passord',\n            userPlaceholder: 'For- og etternavn',\n            passPlaceholder: 'Passord',\n            passConfirmPlaceholder: 'Bekreft passord',\n            emailPlaceholder: 'E-postadresse',\n            emailResetPlaceholder: 'Din e-postadresse',\n            links: ['Glemt passordet ditt ?', 'Opprett ny konto', 'Logg inn'],\n            login: 'Send',\n            logWith: 'eller',\n            //Errors\n            errors: {\n                email: 'Ugyldig e-postadresse',\n                password: 'Passordet må være på minst åtte tegn',\n                passwordNotMatch: 'Passordet matcher ikke inntastet passord',\n                fullname: 'Ugyldig brukernavn'\n            }\n        },\n        'ar': {\n            loginTxt: 'تسجيل دخول',\n            signUpTxt: 'تسجيل',\n            resetTxt: 'إعادة تعيين كلمة المرور',\n            userPlaceholder: 'الاسم الكامل',\n            passPlaceholder: 'كلمة المرور',\n            passConfirmPlaceholder: 'تأكيد كلمة المرور',\n            emailPlaceholder: 'بريد إلكتروني',\n            emailResetPlaceholder: 'عنوان بريدك الإلكتروني',\n            links: ['هل نسيت كلمة المرور؟', 'التسجيل الآن', 'تسجيل الدخول الآن'],\n            login: 'اعتماد',\n            logWith: 'أو',\n            //Errors\n            errors: {\n                email: ' تنسيق عنوان البريد الإلكتروني غير صحيح',\n                password: 'يجب أن تتكون كلمة المرور من 8 حروف على الأقل',\n                passwordNotMatch: 'كلمة المرور غير متطابقة',\n                fullname: 'اسم المستخدم غير صحيح'\n            }\n        }\n    };\n    /*\n    SOCIAL BUTTONS\n     */\n    var social = {\n        'eniro': {\n            text: 'Eniro',\n            link: '#'\n        },\n        'facebook': {\n            text: 'Facebook',\n            link: '#'\n        },\n        'twitter': {\n            text: 'Twitter',\n            link: '#'\n        },\n        'google': {\n            text: 'Google',\n            link: '#'\n        },\n        'linkedin': {\n            text: 'LinkedIn',\n            link: '#'\n        },\n        'android': {\n            text: 'Android',\n            link: '#'\n        },\n        'skype': {\n            text: 'Skype',\n            link: '#'\n        }\n    };\n    /*\n    -------------------C O N S T R U C T O R BEGIN-------------------------------------------------------\n     */\n    function Frodo(element, options) {\n        //Assign this to variable in order to use it also in callback functions\n        var frodo = this, \n        //Shorthand for frodo.config\n        config, lang, body;\n        //User options\n        frodo.defaults_provider = defaults.provider;\n        frodo.options_provider = options.provider;\n        //Config object\n        frodo.config = config = $.extend(true, {}, defaults, options);\n        //Element we call a function on\n        frodo.element = element;\n        //Set language\n        var defaultLang = Object.keys(translation[defaults.lang]), configLang = (typeof translation[config.lang] !== 'undefined') ? Object.keys(translation[config.lang]) : void 0;\n        frodo.lang = ((typeof configLang === 'undefined') || (defaultLang.length !== configLang.length)) ? defaults.lang : config.lang;\n        //Shorthand for config.body\n        frodo.body = body = frodoConfig.body;\n        // body = config.body;\n        /*\n-----------------------------E V E N T  H A N D L E R S BEGIN----------------------------------------------------------\n */\n        /*\n-----------------------------OPEN LOGIN PANEL--------------------------------------------------------------------\n */\n        frodo.element.on('click', function (event) {\n            //Prevent default behaviour\n            frodo.stopEvent(event);\n            //Reset frodo, wrapper and overlay classes\n            frodo.resetMainClasses(true);\n            //Reset err message\n            frodo.showAlert(null, {\n                messageBox: frodoConfig.frodoLogin.message,\n                text: frodoConfig.frodoLogin.message + ' > span',\n                alert: frodoConfig.frodoLogin.messageAlert\n            });\n            //Rest form to login\n            frodo.toggleForm('init');\n            //Clear errors\n            frodo.clearErrors();\n            //Clear inputs\n            frodo.clearInputs();\n            //Enable submit btn\n            frodo.submitDisabled(false);\n            //Set focus on first not disabled input\n            frodo.focusFirst();\n        });\n        /*\n-----------------------------CLOSE LOGIN PANEL--------------------------------------------------------------------\n */\n        if (config.device === 'desktop') {\n            //Close login panel\n            $(body).on('click', '.' + frodoConfig.frodoHeader.closeBtn, function () {\n                frodo.closePanel();\n            });\n            $(body).on('keyup', function (event) {\n                //If 'Escape' key is pressed\n                if (event.keyCode === 27 && frodoConfig.currentForm !== null) {\n                    frodo.closePanel();\n                }\n            });\n        }\n        /*\n-----------------------------REGISTER FORM HANDLER-----------------------------------------------------------------\n */\n        $(body).on('click', '.' + frodoConfig.frodoLogin.signUp, function (event) {\n            frodo.stopEvent(event);\n            frodo.toggleForm('signup');\n            frodo.clearErrors();\n            frodo.submitDisabled(false);\n            //Set focus on first not disabled input\n            frodo.focusFirst();\n        });\n        /*\n-----------------------------RESET FORM HANDLER-----------------------------------------------------------------\n */\n        $(body).on('click', '.' + frodoConfig.frodoLogin.forgot, function (event) {\n            frodo.stopEvent(event);\n            frodo.toggleForm('reset');\n            frodo.clearErrors();\n            frodo.submitDisabled(false);\n            //Set focus on first not disabled input\n            frodo.focusFirst();\n        });\n        /*\n-----------------------------FORM VALIDATION HANDLER --------------------------------------------------------\n */\n        $(body).on('input', 'input', function (event) {\n            //If user press 'enter'\n            if (event.which === 13 || event.keyCode === 13) {\n                $('.' + frodoConfig.frodoForm).trigger('submit');\n            }\n            frodo.submitDisabled(true);\n            frodo.validate(event);\n            frodo.stopEvent(event);\n        });\n        $(body).on('submit', '.' + frodoConfig.frodoForm, function (event) {\n            frodo.stopEvent(event);\n            frodo.validate(event);\n            //Ajax submit\n        });\n        /*\n-----------------------------AJAX FORM VALIDATION-----------------------------------------------------------------\n */\n        // TEMP - Ajax - jsonp\n        $(body).on('click', '.frodo-btn', function () {\n            var url = 'http://jurczynski.czest.pl/registerFailed.json?callback=myCallback', url2 = 'http://jurczynski.czest.pl/registerSuccess.json?callback=myCallback', address = [url, url2], index;\n            index = frodo.getRandomInt(0, address.length - 1);\n            $.ajax({\n                type: 'GET',\n                url: address[index],\n                dataType: 'jsonp',\n                jsonpCallback: 'myCallback'\n            }).then(function (response) {\n                frodo.showAlert(response, {\n                    messageBox: frodoConfig.frodoLogin.message,\n                    text: frodoConfig.frodoLogin.message + '> span',\n                    alert: frodoConfig.frodoLogin.messageAlert\n                });\n            });\n        });\n        /*\n-----------------------------E V E N T  H A N D L E R S  E N D-------------------------------------------------------\n */\n        /*\n        ---------------------------------------------------------------------------------------------------------------\n         */\n        //INITIALIZE PLUGIN\n        frodo.init();\n    }\n    /*\n    -------------------C O N S T R U C T O R  END----------------------------------------------------\n     */\n    /*\n    -------------------M E T H O D S  BEGIN --------------------------------------------------\n     */\n    Frodo.prototype.init = function () {\n        //Shorthand for this.config\n        var config = this.config, lang = this.lang, frodo = $('#' + frodoConfig.frodoWrapper), inputs = [], def_providers = this.defaults_provider, opt_providers = this.options_provider, el, providers = [], keys = null;\n        //CACHED OBJECTS\n        el = {\n            //Main elemenets\n            wrapper: $('<div/>', {\n                id: frodoConfig.frodoWrapper\n            }),\n            overlay: $('<div/>', {\n                class: (config.device === 'desktop') ? frodoConfig.frodoOverlay : ''\n            }),\n            frodo: $('<div/>', {\n                id: frodoConfig.frodo,\n                class: frodoConfig.frodo\n            }),\n            form: $('<form/>', {\n                class: frodoConfig.frodoForm,\n                action: frodoConfig.submitUrl,\n                method: frodoConfig.method,\n                name: frodoConfig.frodoForm,\n                novalidate: true\n            }),\n            //Header\n            header: $('<h3/>', {\n                class: frodoConfig.frodoHeader.header\n            }),\n            headerTxt: $('<span/>', {\n                class: frodoConfig.frodoHeader.text,\n                html: translation[lang].loginTxt\n            }),\n            closeBtn: $('<button/>', {\n                class: frodoConfig.frodoHeader.closeBtn,\n                type: 'button',\n                html: 'x'\n            }),\n            //Login form\n            loginBox: $('<div/>', {\n                class: frodoConfig.frodoLogin.box\n            }),\n            message: $('<div/>', {\n                id: frodoConfig.frodoLogin.message,\n                class: frodoConfig.frodoLogin.message\n            }).append($('<span/>')),\n            inputWrapper: $('<div/>', {\n                class: frodoConfig.frodoLogin.inputWrapper\n            })\n                .append($('<span/>', {\n                class: frodoConfig.frodoLogin.inputError\n            })),\n            input: {\n                fullname: $('<input/>', {\n                    type: 'text',\n                    name: 'fullname',\n                    class: frodoConfig.frodoLogin.input + ' ' + frodoConfig.hideClass,\n                    placeholder: translation[lang].userPlaceholder,\n                    disabled: true\n                }),\n                email: $('<input/>', {\n                    type: 'email',\n                    name: 'email',\n                    class: frodoConfig.frodoLogin.input,\n                    placeholder: translation[lang].emailPlaceholder\n                }),\n                password: $('<input/>', {\n                    id: 'firstPassword',\n                    class: frodoConfig.frodoLogin.input,\n                    type: 'password',\n                    name: 'password',\n                    'data-if-match': '#secondPassword',\n                    placeholder: translation[lang].passPlaceholder\n                }),\n                passwordConfirm: $('<input/>', {\n                    id: 'secondPassword',\n                    class: frodoConfig.frodoLogin.input + ' ' + frodoConfig.hideClass,\n                    type: 'password',\n                    name: 'passwordConfirm',\n                    placeholder: translation[lang].passConfirmPlaceholder,\n                    'data-if-match': '#firstPassword',\n                    disabled: true\n                }),\n                passwordReset: $('<input/>', {\n                    type: 'email',\n                    name: 'passwordReset',\n                    class: frodoConfig.frodoLogin.input + ' ' + frodoConfig.hideClass,\n                    placeholder: translation[lang].emailResetPlaceholder,\n                    disabled: true\n                })\n            },\n            loginFooter: $('<div/>', {\n                class: frodoConfig.frodoLogin.footer\n            }),\n            frodoLinksWrapper: $('<div/>', {\n                class: frodoConfig.frodoLogin.linksWrapper\n            }),\n            forgotLink: $('<a/>', {\n                href: frodoConfig.forgotLink,\n                class: frodoConfig.frodoLogin.forgot,\n                html: translation[lang].links[0]\n            }),\n            signUpLink: $('<a/>', {\n                href: frodoConfig.signUpLink,\n                class: frodoConfig.frodoLogin.signUp,\n                html: translation[lang].links[1]\n            }),\n            submitBtn: $('<button/>', {\n                class: frodoConfig.frodoLogin.submit,\n                type: 'submit',\n                html: translation[lang].login\n            }),\n            //Social\n            logWith: $('<span/>', {\n                class: frodoConfig.log,\n                html: translation[lang].logWith\n            }),\n            socialWrapper: $('<div/>', {\n                class: frodoConfig.social\n            })\n        };\n        /**\n         * CREATING HTML STRUCTURE\n         */\n        //Check if there is only one instace of plugin\n        if (frodo.length === 0) {\n            //Wrap all content with frodo wrapper, and append frodo container and overlay\n            $(frodoConfig.body).wrapInner(el.wrapper).\n                find('#' + frodoConfig.frodoWrapper).\n                append(el.frodo.append(el.form), el.overlay);\n\n           // $(frodoConfig.body).wrapInner(el.wrapper).\n           //      find('#' + frodoConfig.frodoWrapper).\n           //      append(el.frodo.append(el.form), el.overlay);\n            //Insert form header\n            if (config.device === 'desktop') {\n                el.header.append(el.headerTxt, el.closeBtn);\n            }\n            else {\n                el.header.append(el.headerTxt);\n            }\n            $('.' + frodoConfig.frodoForm).append(el.header);\n            //Additional funcionality for widget advanced version\n            if (config.version === 'advanced') {\n                //Append login box\n                el.frodoLinksWrapper.append(el.forgotLink, el.signUpLink);\n                el.loginFooter.append(el.frodoLinksWrapper, el.submitBtn);\n                //Create array of all inputs\n                keys = Object.keys(el.input);\n                for (var i = 0, len = keys.length; i < len; i++) {\n                    inputs.push(el.input[keys[i]]);\n                }\n                //Wrap each input with wrapper\n                inputs = inputs.map(function (input) {\n                    return el.inputWrapper.clone().prepend(input);\n                });\n                //Finally append everything into box\n                el.loginBox.append(el.message, inputs, el.loginFooter);\n                $('.' + frodoConfig.frodoForm).append(el.loginBox);\n                //Append log with text\n                $('.' + frodoConfig.frodoForm).append(el.logWith);\n            }\n            //Append social buttons\n            el.socialWrapper.each(function () {\n                var btns = '', version = config.version, \n                //Set provider either from config or from option\n                // provider = options.provider || config.provider,\n                provider = config.provider, providerClass = (config.device === 'desktop') ?\n                    frodoConfig.frodoLogin.frodoProvider :\n                    frodoConfig.frodoLogin.frodoProvider + ' ' + frodoConfig.frodoLogin.frodoProviderMobile, defaults_provider = def_providers, options_provider = opt_providers, result_provider = defaults_provider.slice();\n                //Aggregate providers from config and options\n                if (options_provider) {\n                    options_provider.forEach(function (opt_name) {\n                        result_provider.forEach(function (conf_name) {\n                            if (opt_name !== conf_name && result_provider.indexOf(opt_name) === -1) {\n                                result_provider.push(opt_name);\n                            }\n                        });\n                    });\n                }\n                //If 'advanced' version is selected than skip eniro button\n                if (version === 'advanced') {\n                    result_provider.forEach(function (name, index) {\n                        if (name === 'eniro') {\n                            result_provider.splice(index, 1);\n                        }\n                    });\n                }\n                //Create buttons\n                result_provider.forEach(function (name) {\n                    var link = social[name].link;\n                    link = link.replace('{client_id}', config.clientId);\n                    link = link.replace('{scope}', config.scope);\n                    link = link.replace('{redirect_uri}', config.redirectUri);\n                    if (name in social) {\n                        btns += '<div class=\"' + providerClass + '\" \">' +\n                            '<a class=\"frodo-btn frodo-btn-' + name + '\"' +\n                            'href=\"' + link + '\">' +\n                            '<i class=\"fa fa-' + name + '\"></i>' + social[name].text + '</a>' +\n                            '</div>';\n                    }\n                });\n                $(this).append(btns);\n            });\n            $('.' + frodoConfig.frodoForm).append(el.socialWrapper);\n            //Set value of current form\n            frodoConfig.currentForm = frodoConfig.forms[0];\n            console.log('Login panel created');\n        }\n        else {\n            return false;\n        }\n    };\n    Frodo.prototype.stopEvent = function (e) {\n        e = e || window.event;\n        e.preventDefault();\n        e.stopPropagation();\n    };\n    Frodo.prototype.resetMainClasses = function (state) {\n        $('.' + frodoConfig.frodoOverlay).toggleClass(frodoConfig.frodoVisible, state);\n        $('#' + frodoConfig.frodo).toggleClass(frodoConfig.frodoVisible, state);\n        $('#' + frodoConfig.frodoWrapper).addClass(frodoConfig.noScroll, state);\n        return true;\n    };\n    Frodo.prototype.clearErrors = function () {\n        var loginBox = $('.' + frodoConfig.frodoLogin.box), errMsg = frodoConfig.errorClass.msg, errInput = frodoConfig.errorClass.input, input = loginBox.find('.' + errInput), msg = loginBox.find('.' + errMsg);\n        input.removeClass(errInput);\n        msg.text('').removeClass(errMsg);\n        return true;\n    };\n    Frodo.prototype.focusFirst = function () {\n        return $('.' + frodoConfig.frodoLogin.input).first().focus();\n    };\n    //Change submit button disabled state\n    Frodo.prototype.submitDisabled = function (bool) {\n        var submitBtn = $('.' + frodoConfig.frodoLogin.submit);\n        return submitBtn.prop('disabled', bool);\n    };\n    Frodo.prototype.validate = function (event) {\n        var frodo = this, config = this.config, lang = this.lang, input = $(event.target), errors = null, anyEmpty = null, submitBtn = $('.' + frodoConfig.frodoLogin.submit), valid = false, error = $('span', input.parent());\n        /**\n         * HELPERS\n         */\n        //Get input name\n        function getInputName() {\n            return input.attr('name');\n        }\n        //Get input type\n        function getInputType() {\n            return input.attr('type');\n        }\n        //Chek input type\n        function checkInputType(name) {\n            return getInputType() === name;\n        }\n        //Get input value\n        function getInputValue(input) {\n            return input.val();\n        }\n        //Get input length\n        function getInputLength(input) {\n            return getInputValue(input).length;\n        }\n        function inputIsEmpty(input) {\n            var val = getInputLength(input);\n            return !val;\n        }\n        /**\n         * VALIDATORS\n         */\n        //Validate email\n        function checkEmail(email) {\n            var pattern = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n            return pattern.test(getInputValue(email));\n        }\n        //Validate password\n        function checkPassword(password) {\n            var val = getInputLength(password);\n            if (val < 8 || inputIsEmpty(password)) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n        function anyInputEmpty() {\n            var anyEmpty = $('.' + frodoConfig.frodoLogin.box).find('.' + frodoConfig.frodoLogin.input).not(':disabled').filter(function () {\n                return !$(this).val();\n            }), errMsg = anyEmpty.find('span');\n            //if submit btn\n            if (getInputName() === frodoConfig.frodoForm) {\n                anyEmpty.each(function () {\n                    var input = $(this), errMsg = $('span', input.parent()), type = input.attr('type'), errors = translation[lang].errors;\n                    if (type === 'text') {\n                        input.addClass(frodoConfig.errorClass.input);\n                        errMsg.text(errors.fullname).addClass(frodoConfig.errorClass.msg);\n                    }\n                    else if (type === 'password') {\n                        input.addClass(frodoConfig.errorClass.input);\n                        errMsg.text(errors.password).addClass(frodoConfig.errorClass.msg);\n                    }\n                    else if (type === 'email') {\n                        input.addClass(frodoConfig.errorClass.input);\n                        errMsg.text(errors.email).addClass(frodoConfig.errorClass.msg);\n                    }\n                });\n            }\n            return anyEmpty.length;\n        }\n        function setErrors(bool, name) {\n            var errors = translation[lang].errors, errName = errors[name];\n            if (bool) {\n                input.addClass(frodoConfig.errorClass.input);\n                error.text(errName).addClass(frodoConfig.errorClass.msg);\n            }\n            else {\n                input.removeClass(frodoConfig.errorClass.input);\n                error.text('').removeClass(frodoConfig.errorClass.msg);\n            }\n        }\n        //Check for passwords match (only in case of singup form)\n        function passwordsMatch(password) {\n            var ifMatch = password.data('if-match'), currentVal = getInputValue(password), matchVal = $(ifMatch).val(), allErrors = $('[data-if-match]', $('.' + frodoConfig.frodoForm)).siblings('span');\n            //Compare only if match password is >= 8\n            if (matchVal.length >= 8) {\n                //Compare values\n                if (currentVal !== matchVal) {\n                    error.text(translation[lang].errors.passwordNotMatch).addClass(frodoConfig.errorClass.msg);\n                    frodo.submitDisabled(true);\n                }\n                else {\n                    allErrors.text('').removeClass(frodoConfig.errorClass.msg);\n                    validateInput();\n                }\n            }\n        }\n        //Check if there is no empty inputs or error messages\n        function validateInput() {\n            if (errors < 1 && anyInputEmpty() === 0) {\n                return frodo.submitDisabled(false);\n            }\n            else {\n                return frodo.submitDisabled(true);\n            }\n        }\n        //If submit button was clicked\n        if (getInputName() === frodoConfig.frodoForm) {\n            validateInput();\n        }\n        //Email\n        if (checkInputType('email')) {\n            // If email is wrong\n            if (!checkEmail(input)) {\n                setErrors(true, 'email');\n            }\n            else {\n                setErrors(false, 'email');\n                errors = $('.' + frodoConfig.errorClass.input).length;\n                validateInput();\n            }\n        }\n        //All passwords\n        if (checkInputType('password')) {\n            //If any error occurs\n            if (!checkPassword(input)) {\n                setErrors(true, 'password');\n                //Check for passwords match (only in case of singup form)\n                if (frodoConfig.currentForm === frodoConfig.forms[1]) {\n                    passwordsMatch(input);\n                }\n            }\n            else {\n                setErrors(false, 'password');\n                errors = $('.' + frodoConfig.errorClass.input).length;\n                //Check for passwords match (only in case of singup form)\n                validateInput();\n                if (frodoConfig.currentForm === frodoConfig.forms[1]) {\n                    passwordsMatch(input);\n                }\n            }\n        }\n        //Fullname\n        if (checkInputType('text')) {\n            if (inputIsEmpty(input)) {\n                setErrors(true, 'fullname');\n            }\n            else {\n                setErrors(false, 'password');\n                errors = $('.' + frodoConfig.errorClass.input).length;\n                validateInput();\n            }\n        }\n    };\n    /**\n     * [toggleForm switch forms]\n     * @param  {[string]} form [form name]\n     * @return {[boolean]}\n     * */\n    Frodo.prototype.toggleForm = function (form) {\n        function changeTxt(selector, text) {\n            $(selector).text(text);\n            return true;\n        }\n        function aggregateInputs(obj) {\n            var inputs = [], keys = Object.keys(obj);\n            for (var i = 0, len = keys.length; i < len; i++) {\n                inputs.push(obj[keys[i]]);\n            }\n            return inputs;\n        }\n        function toggleInputs(inputs, arr) {\n            inputs.map(function (value) {\n                if (arr.indexOf(value) !== -1) {\n                    $('.frodo-input[name=\"' + value + '\"]').removeClass(frodoConfig.hideClass).prop('disabled', false);\n                }\n                else {\n                    $('.frodo-input[name=\"' + value + '\"]').addClass(frodoConfig.hideClass).prop('disabled', true);\n                }\n            });\n            return true;\n        }\n        function objToArray(obj) {\n            var arr = [];\n            obj.each(function () {\n                return arr.push($(this).attr('name'));\n            });\n            return arr;\n        }\n        //Shorthand for this.config\n        var config = this.config, text = translation[this.lang], inputsObj = $('.frodo-input'), init = [inputsObj.filter('[name=\"email\"]').attr('name'), inputsObj.filter('[name=\"password\"]').attr('name')], signup = [inputsObj.filter('[name=\"fullname\"]').attr('name'),\n            inputsObj.filter('[name=\"email\"]').attr('name'),\n            inputsObj.filter('[name=\"password\"]').attr('name'),\n            inputsObj.filter('[name=\"passwordConfirm\"]').attr('name')], reset = [inputsObj.filter('[name=\"passwordReset\"]').attr('name')], inputs = objToArray(inputsObj), headerTxt = $('.' + frodoConfig.frodoHeader.text), signUpTxt = $('.' + frodoConfig.frodoLogin.signUp);\n        //Delete alert message\n        this.showAlert(null, {\n            messageBox: frodoConfig.frodoLogin.message,\n            text: frodoConfig.frodoLogin.message + ' > span',\n            alert: frodoConfig.frodoLogin.messageAlert\n        });\n        //Clear form inputs\n        this.clearInputs();\n        //Check which form is used\n        if (form === 'signup') {\n            //Check if is either login or reset form, switch to signup\n            if (headerTxt.text() === text.loginTxt || headerTxt.text() === text.resetTxt) {\n                toggleInputs(inputs, signup);\n                changeTxt(headerTxt, text.signUpTxt);\n                changeTxt(signUpTxt, text.links[2]);\n                frodoConfig.currentForm = frodoConfig.forms[1];\n            }\n            else {\n                //Switch to login\n                toggleInputs(inputs, init);\n                changeTxt(headerTxt, text.loginTxt);\n                changeTxt(signUpTxt, text.links[1]);\n                frodoConfig.currentForm = frodoConfig.forms[0];\n            }\n        }\n        else if (form === 'reset') {\n            //Form reset password\n            toggleInputs(inputs, reset);\n            changeTxt(headerTxt, text.resetTxt);\n            changeTxt(signUpTxt, text.links[1]);\n            frodoConfig.currentForm = frodoConfig.forms[2];\n        }\n        else if (form === 'init') {\n            //Form login, init state\n            toggleInputs(inputs, init);\n            changeTxt(headerTxt, text.loginTxt);\n            changeTxt(signUpTxt, text.links[1]);\n            frodoConfig.currentForm = frodoConfig.forms[0];\n        }\n        return true;\n    };\n    /**\n     * [showAlert show message above the form]\n     * @param  {[object]} data\n     * @param  {[object]} box\n     * @param  {[object]} text\n     * @return {[boolean]}\n     */\n    Frodo.prototype.showAlert = function (data, options) {\n        if (data === undefined) {\n            data = false;\n        }\n        if (data) {\n            if (data.fail) {\n                $('#' + options.messageBox).addClass(options.alert);\n                $('.' + options.text).empty().text(data.message);\n            }\n            else {\n                $('#' + options.messageBox).removeClass(options.alert);\n                $('.' + options.text).empty();\n            }\n        }\n        else {\n            $('#' + options.messageBox).removeClass(options.alert);\n            $('.' + options.text).empty();\n        }\n        return true;\n    };\n    /**\n     * [closePanel close login panel]\n     * @return {[boolean]}\n     */\n    Frodo.prototype.closePanel = function () {\n        //Shorthand for this.config\n        var submit = $('.' + frodoConfig.frodoLogin.submit);\n        //Block mouse scroll when panel is open\n        $('#' + frodoConfig.frodoWrapper).removeClass(frodoConfig.noScroll);\n        //Remove uneccessary classes\n        this.resetMainClasses();\n        $('#' + frodoConfig.frodoWrapper).removeClass(frodoConfig.noScroll);\n        this.clearInputs();\n        this.submitDisabled(false);\n        frodoConfig.currentForm = null;\n        return true;\n    };\n    /**\n     * [clearInputs - clear form input]\n     * @return {[boolean]}\n     */\n    Frodo.prototype.clearInputs = function () {\n        $('.' + frodoConfig.frodoLogin.input).each(function () {\n            this.value = '';\n        });\n        return true;\n    };\n    //TEMP - shuffle random url\n    Frodo.prototype.getRandomInt = function (min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    };\n    /*\n    -------------------M E T H O D S  END --------------------------------------------------\n     */\n    $.fn.frodo = function (options) {\n        new Frodo(this.filter('[data-login]'), options);\n        return this;\n    };\n})(jQuery);\n"],"file":"jquery.frodo.js","sourceRoot":"/source/"}
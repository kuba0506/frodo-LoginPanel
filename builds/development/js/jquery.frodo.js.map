{"version":3,"names":[],"mappings":"","sources":["jquery.frodo.js"],"sourcesContent":["/**\r\n * Frodo.js v.1.5 - Multiprovider login panel\r\n * Copyright (c) 2016, Jakub Jurczyñski\r\n *\r\n * To initialise plugin just add data-login attribute to any html element\r\n * $([data-login]).frodo();\r\n * To fire at a page load use:\r\n * $([data-login]).frodo().trigger('click');\r\n */\r\n;\r\n(function($) {\r\n    \"use strict\";\r\n\r\n    /*\r\n    PRIVATE SETTINGS\r\n     */\r\n    var Private = {\r\n        /*\r\n         DEFAULT PLUGIN SETTINGS\r\n         */\r\n        defaults : {\r\n            lang: 'en',\r\n            version: 'basic',\r\n            provider: ['eniro', 'facebook', 'google'],\r\n            device: 'desktop',\r\n            clientId: '',\r\n            redirectUri: '/',\r\n            scope: ''\r\n        },\r\n\r\n        /*\r\n         MAIN CONFIG\r\n         */\r\n        frodoConfig : {\r\n            //State values\r\n            currentForm: null,\r\n            forms: ['login', 'signup', 'reset'],\r\n\r\n            //Classes and ids\r\n            body: 'body',\r\n            frodoWrapper: 'frodo-wrapper',\r\n            frodo: 'frodo',\r\n            frodoOverlay: 'frodo-overlay',\r\n            frodoForm: 'frodo-form',\r\n            frodoHeader: {\r\n                header: 'frodo-header',\r\n                text: 'frodo-header-txt',\r\n                closeBtn: 'frodo-btn-close'\r\n            },\r\n            frodoLogin: {\r\n                box: 'frodo-login-box',\r\n                message: 'frodo-message',\r\n                messageAlert: 'frodo-message-alert',\r\n                messageSuccess: 'frodo-message-success',\r\n                frodoProvider: 'frodo-provider',\r\n                frodoProviderMobile: 'frodo-provider-mobile',\r\n                input: 'frodo-input',\r\n                inputWrapper: 'frodo-input-wrapper',\r\n                inputError: 'frodo-err-msg',\r\n                footer: 'frodo-login-footer',\r\n                linksWrapper: 'frodo-links',\r\n                forgot: 'frodo-forgot',\r\n                signUp: 'frodo-sign-up',\r\n                submit: 'frodo-btn-submit'\r\n            },\r\n            log: 'frodo-log-with',\r\n            social: 'frodo-social',\r\n            //Helpers\r\n            frodoVisible: 'frodo-visible',\r\n            hideClass: 'frodo-hide',\r\n            noScroll: 'frodo-no-scroll',\r\n            //Error class\r\n            errorClass: {\r\n                input: 'frodo-err-input',\r\n                msg: 'frodo-err-msg'\r\n            },\r\n\r\n            //Form settings\r\n            method: 'get',\r\n            submitUrl: '?',\r\n            forgotLink: '#',\r\n            signUpLink: '#'\r\n        },\r\n\r\n        /*\r\n        TRANSLATIONS\r\n         */\r\n        translation : {\r\n            'en': {\r\n                loginTxt: 'Log in',\r\n                signUpTxt: 'Sign up',\r\n                resetTxt: 'Password Reset',\r\n                userPlaceholder: 'Fullname',\r\n                passPlaceholder: 'Password',\r\n                passConfirmPlaceholder: 'Confirm password',\r\n                emailPlaceholder: 'Email',\r\n                emailResetPlaceholder: 'Your email address',\r\n                links: ['Forgot your password ?', 'Sign up now', 'Log in now'],\r\n                login: 'Submit',\r\n                logWith: 'or',\r\n                //Errors\r\n                errors: {\r\n                    email: 'Invalid email address format',\r\n                    password: 'Password should be at least 8 characters',\r\n                    passwordNotMatch: 'Passwords don\\'t match',\r\n                    fullname: 'Invalid username'\r\n                }\r\n\r\n            },\r\n            'se': {\r\n                loginTxt: 'Logga in',\r\n                signUpTxt: 'Skapa nytt konto',\r\n                resetTxt: 'E-postadress Återställning',\r\n                userPlaceholder: 'För och efternamn',\r\n                passPlaceholder: 'Lösenord',\r\n                passConfirmPlaceholder: 'Bekräfta lösenord',\r\n                emailPlaceholder: 'E-postadress',\r\n                emailResetPlaceholder: 'Din E-postadress',\r\n                links: ['Glömt lösenord?', 'Skapa nytt konto', 'Logga in'],\r\n                login: 'Skicka',\r\n                logWith: 'eller',\r\n                //Errors\r\n                errors: {\r\n                    email: 'Ogiltig E-mailadress',\r\n                    password: 'Lösenord skall innehålla minst åtta tecken',\r\n                    passwordNotMatch: 'De använda lösernorden stämmer inte med varandra',\r\n                    fullname: 'Ogiltigt användarnamn'\r\n                }\r\n            },\r\n            'dk': {\r\n                loginTxt: 'Log ind',\r\n                signUpTxt: 'Opret ny konto',\r\n                resetTxt: 'Nulstil adgangskode',\r\n                userPlaceholder: 'For-og efternavn',\r\n                passPlaceholder: 'Adgangskode',\r\n                passConfirmPlaceholder: 'Bekræft adgangskode',\r\n                emailPlaceholder: 'Mailadresse',\r\n                emailResetPlaceholder: 'Din mailadresse',\r\n                links: ['Glemt adgangskode?', 'Opret ny konto', 'Log ind'],\r\n                login: 'Send',\r\n                logWith: 'eller',\r\n                //Errors\r\n                errors: {\r\n                    email: 'Ugyldig mailadresse',\r\n                    password: 'Adgangskode skal indeholde mindst otte tegn',\r\n                    passwordNotMatch: 'De indtastede adgangskoder er ikke ens',\r\n                    fullname: 'Ugyldigt brugernavn'\r\n                }\r\n            },\r\n            'no': {\r\n                loginTxt: 'Logg inn',\r\n                signUpTxt: 'Opprett ny konto',\r\n                resetTxt: 'Nullstill passord',\r\n                userPlaceholder: 'For- og etternavn',\r\n                passPlaceholder: 'Passord',\r\n                passConfirmPlaceholder: 'Bekreft passord',\r\n                emailPlaceholder: 'E-postadresse',\r\n                emailResetPlaceholder: 'Din e-postadresse',\r\n                links: ['Glemt passordet ditt ?', 'Opprett ny konto', 'Logg inn'],\r\n                login: 'Send',\r\n                logWith: 'eller',\r\n                //Errors\r\n                errors: {\r\n                    email: 'Ugyldig e-postadresse',\r\n                    password: 'Passordet må være på minst åtte tegn',\r\n                    passwordNotMatch: 'Passordet matcher ikke inntastet passord',\r\n                    fullname: 'Ugyldig brukernavn'\r\n                }\r\n            },\r\n            'ar': {\r\n                loginTxt: 'تسجيل دخول',\r\n                signUpTxt: 'تسجيل',\r\n                resetTxt: 'إعادة تعيين كلمة المرور',\r\n                userPlaceholder: 'الاسم الكامل',\r\n                passPlaceholder: 'كلمة المرور',\r\n                passConfirmPlaceholder: 'تأكيد كلمة المرور',\r\n                emailPlaceholder: 'بريد إلكتروني',\r\n                emailResetPlaceholder: 'عنوان بريدك الإلكتروني',\r\n                links: ['هل نسيت كلمة المرور؟', 'التسجيل الآن', 'تسجيل الدخول الآن'],\r\n                login: 'اعتماد',\r\n                logWith: 'أو',\r\n                //Errors\r\n                errors: {\r\n                    email: ' تنسيق عنوان البريد الإلكتروني غير صحيح',\r\n                    password: 'يجب أن تتكون كلمة المرور من 8 حروف على الأقل',\r\n                    passwordNotMatch: 'كلمة المرور غير متطابقة',\r\n                    fullname: 'اسم المستخدم غير صحيح'\r\n                }\r\n            }\r\n        },\r\n        /*\r\n        SOCIAL BUTTONS\r\n        */\r\n        socialBtn : {\r\n            'eniro': {\r\n                text: 'Eniro',\r\n                link: 'https://accounts.eniro.com.test.eniro.net/frodo/oauth/eniro/authorize?response_type=code&client_id={client_id}&scope={scope}&redirect_uri={redirect_uri}'\r\n            },\r\n            'facebook': {\r\n                text: 'Facebook',\r\n                link: 'https://accounts.eniro.com.test.eniro.net/frodo/oauth/facebook/authorize?response_type=code&client_id={client_id}&scope={scope}&redirect_uri={redirect_uri}'\r\n            },\r\n            'google' : {\r\n               text: 'Google',\r\n                link: 'https://accounts.eniro.com.test.eniro.net/frodo/oauth/google/authorize?response_type=code&client_id={client_id}&scope={scope}&redirect_uri={redirect_uri}'\r\n            }\r\n        }\r\n        //END PRIVATE\r\n    };\r\n\r\n    /*\r\n    -------------------C O N S T R U C T O R BEGIN-------------------------------------------------------\r\n     */\r\n    function Frodo(element, options) {\r\n        //Assign this to variable in order to use it also in callback functions\r\n        var frodo = this,\r\n            //Shorthand for frodo.config\r\n            config,\r\n            lang,\r\n            body;\r\n\r\n        //User options\r\n        frodo.defaults_provider = Private.defaults.provider;\r\n        frodo.options_provider = options.provider;\r\n\r\n        //Config object\r\n        frodo.config = config = $.extend(true, {}, Private.defaults, options);\r\n\r\n        //Element we call a function on\r\n        frodo.element = element;\r\n\r\n        //Set language\r\n        var defaultLang = Object.keys(Private.translation[Private.defaults.lang]),\r\n            configLang = (typeof Private.translation[config.lang] !== 'undefined') ? Object.keys(Private.translation[config.lang]) : void 0;\r\n\r\n        frodo.lang = ((typeof configLang === 'undefined') || (defaultLang.length !== configLang.length)) ? Private.defaults.lang : config.lang;\r\n\r\n\r\n        //Shorthand for config.body\r\n        frodo.body = body = Private.frodoConfig.body;\r\n        // body = config.body;\r\n\r\n        /*\r\n-----------------------------E V E N T  H A N D L E R S BEGIN----------------------------------------------------------\r\n */\r\n\r\n        /*\r\n-----------------------------OPEN LOGIN PANEL--------------------------------------------------------------------\r\n */\r\n        frodo.element.on('click', function(event) {\r\n\r\n            //Prevent default behaviour\r\n            frodo.stopEvent(event);\r\n\r\n            //Reset frodo, wrapper and overlay classes\r\n            frodo.resetMainClasses(true);\r\n\r\n            //Reset err message\r\n            frodo.showAlert(null, {\r\n                messageBox: Private.frodoConfig.frodoLogin.message,\r\n                text: Private.frodoConfig.frodoLogin.message + ' > span',\r\n                alert: Private.frodoConfig.frodoLogin.messageAlert\r\n            });\r\n\r\n            //Rest form to login\r\n            frodo.toggleForm('init');\r\n\r\n            //Clear errors\r\n            frodo.clearErrors();\r\n\r\n            //Clear inputs\r\n            frodo.clearInputs();\r\n\r\n            //Enable submit btn\r\n            frodo.submitDisabled(false);\r\n\r\n            //Set focus on first not disabled input\r\n            frodo.focusFirst();\r\n        });\r\n\r\n        /*\r\n-----------------------------CLOSE LOGIN PANEL--------------------------------------------------------------------\r\n */\r\n        if (config.device === 'desktop') {\r\n            //Close login panel\r\n            $(body).on('click', '.' + Private.frodoConfig.frodoHeader.closeBtn, function() {\r\n                frodo.closePanel();\r\n            });\r\n\r\n            $(body).on('keyup', function(event) {\r\n                //If 'Escape' key is pressed\r\n                if (event.keyCode === 27 && Private.frodoConfig.currentForm !== null) {\r\n                    frodo.closePanel();\r\n                }\r\n            });\r\n        }\r\n\r\n        /*\r\n-----------------------------REGISTER FORM HANDLER-----------------------------------------------------------------\r\n */\r\n        $(body).on('click', '.' + Private.frodoConfig.frodoLogin.signUp, function(event) {\r\n            frodo.stopEvent(event);\r\n            frodo.toggleForm('signup');\r\n            frodo.clearErrors();\r\n            frodo.submitDisabled(false);\r\n\r\n            //Set focus on first not disabled input\r\n            frodo.focusFirst();\r\n        });\r\n        /*\r\n-----------------------------RESET FORM HANDLER-----------------------------------------------------------------\r\n */\r\n        $(body).on('click', '.' + Private.frodoConfig.frodoLogin.forgot, function(event) {\r\n            frodo.stopEvent(event);\r\n            frodo.toggleForm('reset');\r\n            frodo.clearErrors();\r\n            frodo.submitDisabled(false);\r\n\r\n            //Set focus on first not disabled input\r\n            frodo.focusFirst();\r\n        });\r\n\r\n        /*\r\n-----------------------------FORM VALIDATION HANDLER --------------------------------------------------------\r\n */\r\n        $(body).on('input', 'input', function(event) {\r\n            //If user press 'enter'\r\n            if (event.which == 13 || event.keyCode == 13) {\r\n                $('.' + Private.frodoConfig.frodoForm).trigger('submit');\r\n            }\r\n            frodo.submitDisabled(true);\r\n            frodo.validate(event);\r\n            frodo.stopEvent(event);\r\n\r\n        });\r\n        $(body).on('submit', '.' + Private.frodoConfig.frodoForm, function(event) {\r\n            frodo.stopEvent(event);\r\n            frodo.validate(event);\r\n            //Ajax submit\r\n        });\r\n\r\n        /*\r\n-----------------------------AJAX FORM VALIDATION-----------------------------------------------------------------\r\n */\r\n        // TEMP - Ajax - jsonp\r\n        $(body).on('click', '.frodo-btn', function() {\r\n            var url = 'http://jurczynski.czest.pl/registerFailed.json?callback=myCallback',\r\n                url2 = 'http://jurczynski.czest.pl/registerSuccess.json?callback=myCallback',\r\n                address = [url, url2],\r\n                index;\r\n\r\n            index = frodo.getRandomInt(0, address.length - 1);\r\n\r\n            $.ajax({\r\n                type: 'GET',\r\n                url: address[index],\r\n                dataType: 'jsonp',\r\n                jsonpCallback: 'myCallback'\r\n            }).then(function(response) {\r\n                frodo.showAlert(response, {\r\n                    messageBox: Private.frodoConfig.frodoLogin.message,\r\n                    text: Private.frodoConfig.frodoLogin.message + '> span',\r\n                    alert: Private.frodoConfig.frodoLogin.messageAlert\r\n                });\r\n            });\r\n        });\r\n\r\n        /*\r\n-----------------------------E V E N T  H A N D L E R S  E N D-------------------------------------------------------\r\n */\r\n\r\n        /*\r\n        ---------------------------------------------------------------------------------------------------------------\r\n         */\r\n        //INITIALIZE PLUGIN\r\n        frodo.init();\r\n    }\r\n    /*\r\n    -------------------C O N S T R U C T O R  END----------------------------------------------------\r\n     */\r\n\r\n    /*\r\n    -------------------M E T H O D S  BEGIN --------------------------------------------------\r\n     */\r\n\r\n    Frodo.prototype.init = function() {\r\n        //Shorthand for this.config\r\n        var config = this.config,\r\n            lang = this.lang,\r\n            frodo = $('#' + Private.frodoConfig.frodoWrapper),\r\n            inputs = [],\r\n            def_providers = this.defaults_provider,\r\n            opt_providers = this.options_provider,\r\n            el = {},\r\n            providers = [],\r\n            keys = null;\r\n\r\n        //CACHED OBJECTS\r\n        el = {\r\n            //Main elemenets\r\n            wrapper: $('<div/>', {\r\n                id: Private.frodoConfig.frodoWrapper\r\n            }),\r\n            overlay: $('<div/>', {\r\n                class: (config.device === 'desktop') ? Private.frodoConfig.frodoOverlay : ''\r\n            }),\r\n            frodo: $('<div/>', {\r\n                id: Private.frodoConfig.frodo,\r\n                class: Private.frodoConfig.frodo\r\n            }),\r\n            form: $('<form/>', {\r\n                class: Private.frodoConfig.frodoForm,\r\n                action: Private.frodoConfig.submitUrl,\r\n                method: Private.frodoConfig.method,\r\n                name: Private.frodoConfig.frodoForm,\r\n                novalidate: true\r\n            }),\r\n\r\n            //Header\r\n            header: $('<h3/>', {\r\n                class: Private.frodoConfig.frodoHeader.header\r\n            }),\r\n            headerTxt: $('<span/>', {\r\n                class: Private.frodoConfig.frodoHeader.text,\r\n                html: Private.translation[lang].loginTxt\r\n            }),\r\n            closeBtn: $('<button/>', {\r\n                class: Private.frodoConfig.frodoHeader.closeBtn,\r\n                type: 'button',\r\n                html: 'x'\r\n            }),\r\n\r\n            //Login form\r\n            loginBox: $('<div/>', {\r\n                class: Private.frodoConfig.frodoLogin.box\r\n            }),\r\n            message: $('<div/>', {\r\n                id: Private.frodoConfig.frodoLogin.message,\r\n                class: Private.frodoConfig.frodoLogin.message\r\n            }).append($('<span/>')),\r\n            inputWrapper: $('<div/>', {\r\n                    class: Private.frodoConfig.frodoLogin.inputWrapper\r\n                })\r\n                .append($('<span/>', {\r\n                    class: Private.frodoConfig.frodoLogin.inputError\r\n                })),\r\n            input: {\r\n                fullname: $('<input/>', {\r\n                    type: 'text',\r\n                    name: 'fullname',\r\n                    class: Private.frodoConfig.frodoLogin.input + ' ' + Private.frodoConfig.hideClass,\r\n                    placeholder: Private.translation[lang].userPlaceholder,\r\n                    disabled: true\r\n                }),\r\n                email: $('<input/>', {\r\n                    type: 'email',\r\n                    name: 'email',\r\n                    class: Private.frodoConfig.frodoLogin.input,\r\n                    placeholder: Private.translation[lang].emailPlaceholder\r\n                }),\r\n                password: $('<input/>', {\r\n                    id: 'firstPassword',\r\n                    class: Private.frodoConfig.frodoLogin.input,\r\n                    type: 'password',\r\n                    name: 'password',\r\n                    'data-if-match': '#secondPassword',\r\n                    placeholder: Private.translation[lang].passPlaceholder\r\n                }),\r\n                passwordConfirm: $('<input/>', {\r\n                    id: 'secondPassword',\r\n                    class: Private.frodoConfig.frodoLogin.input + ' ' + Private.frodoConfig.hideClass,\r\n                    type: 'password',\r\n                    name: 'passwordConfirm',\r\n                    placeholder: Private.translation[lang].passConfirmPlaceholder,\r\n                    'data-if-match': '#firstPassword',\r\n                    disabled: true\r\n                }),\r\n                passwordReset: $('<input/>', {\r\n                    type: 'email',\r\n                    name: 'passwordReset',\r\n                    class: Private.frodoConfig.frodoLogin.input + ' ' + Private.frodoConfig.hideClass,\r\n                    placeholder: Private.translation[lang].emailResetPlaceholder,\r\n                    disabled: true\r\n                })\r\n\r\n            },\r\n            loginFooter: $('<div/>', {\r\n                class: Private.frodoConfig.frodoLogin.footer\r\n            }),\r\n            frodoLinksWrapper: $('<div/>', {\r\n                class: Private.frodoConfig.frodoLogin.linksWrapper\r\n            }),\r\n            forgotLink: $('<a/>', {\r\n                href: Private.frodoConfig.forgotLink,\r\n                class: Private.frodoConfig.frodoLogin.forgot,\r\n                html: Private.translation[lang].links[0]\r\n            }),\r\n            signUpLink: $('<a/>', {\r\n                href: Private.frodoConfig.signUpLink,\r\n                class: Private.frodoConfig.frodoLogin.signUp,\r\n                html: Private.translation[lang].links[1]\r\n            }),\r\n            submitBtn: $('<button/>', {\r\n                class: Private.frodoConfig.frodoLogin.submit,\r\n                type: 'submit',\r\n                html: Private.translation[lang].login\r\n            }),\r\n\r\n            //Social\r\n            logWith: $('<span/>', {\r\n                class: Private.frodoConfig.log,\r\n                html: Private.translation[lang].logWith\r\n            }),\r\n            socialWrapper: $('<div/>', {\r\n                class: Private.frodoConfig.social\r\n            })\r\n        };\r\n\r\n        /**\r\n         * CREATING HTML STRUCTURE\r\n         */\r\n\r\n        //Check if there is only one instace of plugin\r\n        if (frodo.length === 0) {\r\n\r\n            //Wrap all content with frodo wrapper, and append frodo container and overlay\r\n            $(Private.frodoConfig.body).wrapInner(el.wrapper).\r\n            find('#' + Private.frodoConfig.frodoWrapper).\r\n            append(el.frodo.append(el.form), el.overlay);\r\n\r\n            //Insert form header\r\n            if (config.device === 'desktop') {\r\n                el.header.append(el.headerTxt, el.closeBtn);\r\n            } else {\r\n                el.header.append(el.headerTxt);\r\n            }\r\n\r\n            $('.' + Private.frodoConfig.frodoForm).append(el.header);\r\n\r\n            //Additional funcionality for widget advanced version\r\n            if (config.version === 'advanced') {\r\n\r\n                //Append login box\r\n                el.frodoLinksWrapper.append(el.forgotLink, el.signUpLink);\r\n                el.loginFooter.append(el.frodoLinksWrapper, el.submitBtn);\r\n\r\n                //Create array of all inputs\r\n                keys = Object.keys(el.input);\r\n\r\n                for (var i = 0, len = keys.length; i < len; i++) {\r\n                    inputs.push(el.input[keys[i]]);\r\n                }\r\n\r\n                //Wrap each input with wrapper\r\n                inputs = inputs.map(function(input) {\r\n                    return el.inputWrapper.clone().prepend(input);\r\n                });\r\n                //Finally append everything into box\r\n                el.loginBox.append(el.message, inputs, el.loginFooter);\r\n                $('.' + Private.frodoConfig.frodoForm).append(el.loginBox);\r\n\r\n                //Append log with text\r\n                $('.' + Private.frodoConfig.frodoForm).append(el.logWith);\r\n\r\n            }\r\n\r\n            //Append social buttons\r\n            el.socialWrapper.each(function() {\r\n                var btns = '',\r\n                    version = config.version,\r\n                    //Set provider either from config or from option\r\n                    // provider = options.provider || config.provider,\r\n                    provider = config.provider,\r\n                    providerClass = (config.device === 'desktop') ? Private.frodoConfig.frodoLogin.frodoProvider : Private.frodoConfig.frodoLogin.frodoProvider + ' ' + Private.frodoConfig.frodoLogin.frodoProviderMobile,\r\n                    defaults_provider = def_providers,\r\n                    options_provider = opt_providers,\r\n                    result_provider = defaults_provider.slice();\r\n\r\n                //Aggregate providers from config and options\r\n                if (options_provider) {\r\n\r\n                    options_provider.forEach(function(opt_name) {\r\n                        result_provider.forEach(function(conf_name) {\r\n                            if (opt_name !== conf_name && result_provider.indexOf(opt_name) === -1) {\r\n                                result_provider.push(opt_name);\r\n                            }\r\n\r\n                        });\r\n                    });\r\n                }\r\n                // console.log('Result providers: ', result_provider);\r\n\r\n\r\n                //If 'advanced' version is selected than skip eniro button\r\n                if (version === 'advanced') {\r\n                    result_provider.forEach(function(name, index) {\r\n                        if (name === 'eniro')\r\n                            result_provider.splice(index, 1);\r\n                    });\r\n                }\r\n\r\n                    // console.log(social);\r\n                //Create buttons\r\n                result_provider.forEach(function(name) {\r\n                    if (name in Private.socialBtn) {\r\n                    var link = Private.socialBtn[name].link;\r\n\r\n\r\n                    link = link.replace('{client_id}', config.clientId);\r\n                    link = link.replace('{scope}', config.scope);\r\n                    link = link.replace('{redirect_uri}', config.redirectUri);\r\n\r\n                    btns += '<div class=\"' + providerClass + '\" \">\\\r\n                                    <a class=\"frodo-btn frodo-btn-' + name + '\" \\\r\n                                     href=\"' + link + '\">\\\r\n                                    <i class=\"fa faa-' + name + '\"></i>' + Private.socialBtn[name].text + '</a>\\\r\n                                    </div>';\r\n                    }\r\n                });\r\n\r\n                $(this).append(btns);\r\n            });\r\n            $('.' + Private.frodoConfig.frodoForm).append(el.socialWrapper);\r\n\r\n            //Set value of current form\r\n            Private.frodoConfig.currentForm = Private.frodoConfig.forms[0];\r\n\r\n            console.log('Login panel created');\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    };\r\n\r\n    Frodo.prototype.stopEvent = function(e) {\r\n        var e = e || window.event;\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\n\r\n\r\n    Frodo.prototype.resetMainClasses = function(state) {\r\n        $('.' + Private.frodoConfig.frodoOverlay).toggleClass(Private.frodoConfig.frodoVisible, state);\r\n        $('#' + Private.frodoConfig.frodo).toggleClass(Private.frodoConfig.frodoVisible, state);\r\n        $('#' + Private.frodoConfig.frodoWrapper).addClass(Private.frodoConfig.noScroll, state);\r\n\r\n        return true;\r\n    };\r\n\r\n    Frodo.prototype.clearErrors = function() {\r\n        var loginBox = $('.' + Private.frodoConfig.frodoLogin.box),\r\n            errMsg = Private.frodoConfig.errorClass.msg,\r\n            errInput = Private.frodoConfig.errorClass.input,\r\n            input = loginBox.find('.' + errInput),\r\n            msg = loginBox.find('.' + errMsg);\r\n\r\n        input.removeClass(errInput);\r\n        msg.text('').removeClass(errMsg);\r\n\r\n        return true;\r\n    };\r\n\r\n    Frodo.prototype.focusFirst = function() {\r\n        return $('.' + Private.frodoConfig.frodoLogin.input).first().focus();\r\n    };\r\n\r\n    //Change submit button disabled state\r\n    Frodo.prototype.submitDisabled = function(bool) {\r\n        var submitBtn = $('.' + Private.frodoConfig.frodoLogin.submit);\r\n\r\n        return submitBtn.prop('disabled', bool);\r\n    };\r\n\r\n    Frodo.prototype.validate = function(event) {\r\n\r\n        /**\r\n         * HELPERS\r\n         */\r\n        //Get input name\r\n        function getInputName() {\r\n            return input.attr('name');\r\n        }\r\n        //Get input type\r\n        function getInputType() {\r\n            return input.attr('type');\r\n        }\r\n        //Chek input type\r\n        function checkInputType(name) {\r\n            return getInputType() === name;\r\n        }\r\n        //Get input value\r\n        function getInputValue(input) {\r\n            return input.val();\r\n        }\r\n        //Get input length\r\n        function getInputLength(input) {\r\n            return getInputValue(input).length;\r\n        }\r\n\r\n        function inputIsEmpty(input) {\r\n            var val = getInputLength(input);\r\n\r\n            return !val;\r\n        }\r\n        /**\r\n         * VALIDATORS\r\n         */\r\n        //Validate email\r\n        function checkEmail(email) {\r\n            var pattern = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\r\n\r\n            return pattern.test(getInputValue(email));\r\n        }\r\n        //Validate password\r\n        function checkPassword(password) {\r\n            var val = getInputLength(password);\r\n\r\n            if (val < 8 || inputIsEmpty(password))\r\n                return false;\r\n            else\r\n                return true;\r\n        }\r\n\r\n        function anyInputEmpty() {\r\n            var anyEmpty = $('.' + Private.frodoConfig.frodoLogin.box).find('.' + Private.frodoConfig.frodoLogin.input).not(':disabled').filter(function() {\r\n                    return !$(this).val();\r\n                }),\r\n                errMsg = anyEmpty.find('span');\r\n            //if submit btn\r\n            if (getInputName() === Private.frodoConfig.frodoForm) {\r\n                anyEmpty.each(function() {\r\n                    var input = $(this),\r\n                        errMsg = $('span', input.parent()),\r\n                        type = input.attr('type'),\r\n                        errors = Private.translation[lang].errors;\r\n\r\n                    if (type === 'text') {\r\n                        input.addClass(Private.frodoConfig.errorClass.input);\r\n                        errMsg.text(errors.fullname).addClass(Private.frodoConfig.errorClass.msg);\r\n                    } else if (type === 'password') {\r\n                        input.addClass(Private.frodoConfig.errorClass.input);\r\n                        errMsg.text(errors.password).addClass(Private.frodoConfig.errorClass.msg);\r\n                    } else if (type === 'email') {\r\n                        input.addClass(Private.frodoConfig.errorClass.input);\r\n                        errMsg.text(errors.email).addClass(Private.frodoConfig.errorClass.msg);\r\n                    }\r\n                });\r\n            }\r\n\r\n            return anyEmpty.length;\r\n        }\r\n\r\n        function setErrors(bool, name) {\r\n            var errors = Private.translation[lang].errors,\r\n                errName = errors[name];\r\n\r\n            if (bool) {\r\n                input.addClass(Private.frodoConfig.errorClass.input);\r\n                error.text(errName).addClass(Private.frodoConfig.errorClass.msg);\r\n            } else {\r\n                input.removeClass(Private.frodoConfig.errorClass.input);\r\n                error.text('').removeClass(Private.frodoConfig.errorClass.msg);\r\n            }\r\n        }\r\n        //Check for passwords match (only in case of singup form)\r\n        function passwordsMatch(password) {\r\n\r\n            var ifMatch = password.data('if-match'),\r\n                currentVal = getInputValue(password),\r\n                matchVal = $(ifMatch).val(),\r\n                allErrors = $('[data-if-match]', $('.' + Private.frodoConfig.frodoForm)).siblings('span');\r\n\r\n            //Compare only if match password is >= 8\r\n            if (matchVal.length >= 8) {\r\n                //Compare values\r\n                if (currentVal !== matchVal) {\r\n                    error.text(Private.translation[lang].errors.passwordNotMatch).addClass(Private.frodoConfig.errorClass.msg);\r\n                    frodo.submitDisabled(true);\r\n                } else {\r\n                    allErrors.text('').removeClass(Private.frodoConfig.errorClass.msg);\r\n                    validateInput();\r\n                }\r\n            }\r\n        }\r\n        //Check if there is no empty inputs or error messages\r\n        function validateInput() {\r\n\r\n            if (errors < 1 && anyInputEmpty() === 0) {\r\n                return frodo.submitDisabled(false);\r\n            } else {\r\n                return frodo.submitDisabled(true);\r\n            }\r\n        }\r\n\r\n        var frodo = this,\r\n            config = this.config,\r\n            lang = this.lang,\r\n            input = $(event.target),\r\n            errors = null,\r\n            anyEmpty = null,\r\n            submitBtn = $('.' + Private.frodoConfig.frodoLogin.submit),\r\n            valid = false,\r\n            error = $('span', input.parent());\r\n\r\n        //If submit button was clicked\r\n        if (getInputName() === Private.frodoConfig.frodoForm) {\r\n            validateInput();\r\n        }\r\n\r\n\r\n        //Email\r\n        if (checkInputType('email')) {\r\n\r\n            // If email is wrong\r\n            if (!checkEmail(input)) {\r\n                setErrors(true, 'email');\r\n            } else {\r\n                setErrors(false, 'email');\r\n                errors = $('.' + Private.frodoConfig.errorClass.input).length;\r\n                validateInput();\r\n            }\r\n        }\r\n\r\n        //All passwords\r\n        if (checkInputType('password')) {\r\n\r\n            //If any error occurs\r\n            if (!checkPassword(input)) {\r\n                setErrors(true, 'password');\r\n                //Check for passwords match (only in case of singup form)\r\n                if (Private.frodoConfig.currentForm === Private.frodoConfig.forms[1]) {\r\n                    passwordsMatch(input);\r\n                }\r\n            } else {\r\n                setErrors(false, 'password');\r\n                errors = $('.' + Private.frodoConfig.errorClass.input).length;\r\n                //Check for passwords match (only in case of singup form)\r\n                validateInput();\r\n                if (Private.frodoConfig.currentForm === Private.frodoConfig.forms[1]) {\r\n                    passwordsMatch(input);\r\n                }\r\n            }\r\n        }\r\n\r\n        //Fullname\r\n        if (checkInputType('text')) {\r\n            if (inputIsEmpty(input)) {\r\n                setErrors(true, 'fullname');\r\n            } else {\r\n                setErrors(false, 'password');\r\n                errors = $('.' + Private.frodoConfig.errorClass.input).length;\r\n                validateInput();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * [toggleForm switch forms]\r\n     * @param  {[string]} form [form name]\r\n     * @return {[boolean]}\r\n     * */\r\n    Frodo.prototype.toggleForm = function(form) {\r\n\r\n        function changeTxt(selector, text) {\r\n\r\n            $(selector).text(text);\r\n\r\n            return true;\r\n        }\r\n\r\n        function aggregateInputs(obj) {\r\n            var inputs = [],\r\n                keys = Object.keys(obj);\r\n\r\n            for (var i = 0, len = keys.length; i < len; i++) {\r\n                inputs.push(obj[keys[i]]);\r\n            }\r\n\r\n            return inputs;\r\n        }\r\n\r\n        function toggleInputs(inputs, arr) {\r\n            inputs.map(function(value) {\r\n                if (arr.indexOf(value) !== -1)\r\n                    $('.frodo-input[name=\"' + value + '\"]').removeClass(Private.frodoConfig.hideClass).prop('disabled', false);\r\n                else\r\n                    $('.frodo-input[name=\"' + value + '\"]').addClass(Private.frodoConfig.hideClass).prop('disabled', true);\r\n            });\r\n\r\n            return true;\r\n        }\r\n\r\n        function objToArray(obj) {\r\n            var arr = [];\r\n\r\n            obj.each(function() {\r\n                return arr.push($(this).attr('name'));\r\n            });\r\n\r\n            return arr;\r\n        }\r\n\r\n        //Shorthand for this.config\r\n        var config = this.config,\r\n            text = Private.translation[this.lang],\r\n            inputsObj = $('.frodo-input'),\r\n            init = [inputsObj.filter('[name=\"email\"]').attr('name'), inputsObj.filter('[name=\"password\"]').attr('name')],\r\n            signup = [inputsObj.filter('[name=\"fullname\"]').attr('name'), inputsObj.filter('[name=\"email\"]').attr('name'), inputsObj.filter('[name=\"password\"]').attr('name'), inputsObj.filter('[name=\"passwordConfirm\"]').attr('name')],\r\n            reset = [inputsObj.filter('[name=\"passwordReset\"]').attr('name')],\r\n            inputs = objToArray(inputsObj),\r\n            headerTxt = $('.' + Private.frodoConfig.frodoHeader.text),\r\n            signUpTxt = $('.' + Private.frodoConfig.frodoLogin.signUp);\r\n\r\n\r\n        //Delete alert message\r\n        this.showAlert(null, {\r\n            messageBox: Private.frodoConfig.frodoLogin.message,\r\n            text: Private.frodoConfig.frodoLogin.message + ' > span',\r\n            alert: Private.frodoConfig.frodoLogin.messageAlert\r\n        });\r\n\r\n        //Clear form inputs\r\n        this.clearInputs();\r\n\r\n        //Check which form is used\r\n        if (form === 'signup') {\r\n            //Check if is either login or reset form, switch to signup\r\n            if (headerTxt.text() === text.loginTxt || headerTxt.text() === text.resetTxt) {\r\n                toggleInputs(inputs, signup);\r\n                changeTxt(headerTxt, text.signUpTxt);\r\n                changeTxt(signUpTxt, text.links[2]);\r\n                Private.frodoConfig.currentForm = Private.frodoConfig.forms[1];\r\n\r\n                //Switch to login\r\n            } else {\r\n                toggleInputs(inputs, init);\r\n                changeTxt(headerTxt, text.loginTxt);\r\n                changeTxt(signUpTxt, text.links[1]);\r\n                Private.frodoConfig.currentForm = Private.frodoConfig.forms[0];\r\n            }\r\n        }\r\n        //Form reset password\r\n        else if (form === 'reset') {\r\n            toggleInputs(inputs, reset);\r\n            changeTxt(headerTxt, text.resetTxt);\r\n            changeTxt(signUpTxt, text.links[1]);\r\n            Private.frodoConfig.currentForm = Private.frodoConfig.forms[2];\r\n        }\r\n\r\n        //Form login, init state\r\n        else if (form === 'init') {\r\n            toggleInputs(inputs, init);\r\n            changeTxt(headerTxt, text.loginTxt);\r\n            changeTxt(signUpTxt, text.links[1]);\r\n            Private.frodoConfig.currentForm = Private.frodoConfig.forms[0];\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * [showAlert show message above the form]\r\n     * @param  {[object]} data\r\n     * @param  {[object]} box\r\n     * @param  {[object]} text\r\n     * @return {[boolean]}\r\n     */\r\n    Frodo.prototype.showAlert = function(data, options) {\r\n        if (data === undefined) {\r\n            data = false;\r\n        }\r\n\r\n        if (data) {\r\n            if (data.fail) {\r\n                $('#' + options.messageBox).addClass(options.alert);\r\n                $('.' + options.text).empty().text(data.message);\r\n            } else {\r\n                $('#' + options.messageBox).removeClass(options.alert);\r\n                $('.' + options.text).empty();\r\n            }\r\n        } else {\r\n            $('#' + options.messageBox).removeClass(options.alert);\r\n            $('.' + options.text).empty();\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * [closePanel close login panel]\r\n     * @return {[boolean]}\r\n     */\r\n    Frodo.prototype.closePanel = function() {\r\n        this.resetMainClasses(false);\r\n        this.clearInputs();\r\n        this.submitDisabled(false);\r\n        Private.frodoConfig.currentForm = null;\r\n\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * [clearInputs - clear form input]\r\n     * @return {[boolean]}\r\n     */\r\n    Frodo.prototype.clearInputs = function() {\r\n        $('.' + Private.frodoConfig.frodoLogin.input).each(function() {\r\n            this.value = '';\r\n        });\r\n\r\n        return true;\r\n    };\r\n\r\n\r\n    //TEMP - shuffle random url\r\n    Frodo.prototype.getRandomInt = function(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    };\r\n    /*\r\n    -------------------M E T H O D S  END --------------------------------------------------\r\n     */\r\n\r\n    $.fn.frodo = function(options) {\r\n            new Frodo(this, options);\r\n        // return this.each(function() {\r\n        // });\r\n        //\r\n        return this;\r\n    };\r\n\r\n})(jQuery);\r\n\r\n\r\n"],"file":"jquery.frodo.js","sourceRoot":"/source/"}
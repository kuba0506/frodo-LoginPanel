{"version":3,"names":[],"mappings":"","sources":["jquery.frodo.js"],"sourcesContent":["/**\n * Frodo.js v.1.5 - Multiprovider login panel\n * Copyright (c) 2016, Jakub Jurczyñski\n *\n * To initialise plugin just add data-login attribute to any html element\n * $([data-login]).frodo();\n * To fire at a page load use:\n * $([data-login]).frodo().trigger('click');\n */\n;\n(function($) {\n    \"use strict\";\n\n    console.log('test123');\n    /*\n    PRIVATE SETTINGS\n     */\n    var Private = {\n        /*\n         DEFAULT PLUGIN SETTINGS\n         */\n        defaults : {\n            lang: 'ar',\n            version: 'basic',\n            provider: ['eniro', 'facebook', 'google'],\n            device: 'desktop',\n            clientId: '',\n            redirectUri: '/',\n            scope: ''\n        },\n\n        /*\n         MAIN CONFIG\n         */\n        frodoConfig : {\n            //State values\n            currentForm: null,\n            forms: ['login', 'signup', 'reset'],\n\n            //Classes and ids\n            body: 'body',\n            frodoWrapper: 'frodo-wrapper',\n            frodo: 'frodo',\n            frodoOverlay: 'frodo-overlay',\n            frodoForm: 'frodo-form',\n            frodoHeader: {\n                header: 'frodo-header',\n                text: 'frodo-header-txt',\n                closeBtn: 'frodo-btn-close'\n            },\n            frodoLogin: {\n                box: 'frodo-login-box',\n                message: 'frodo-message',\n                messageAlert: 'frodo-message-alert',\n                messageSuccess: 'frodo-message-success',\n                frodoProvider: 'frodo-provider',\n                frodoProviderMobile: 'frodo-provider-mobile',\n                input: 'frodo-input',\n                inputWrapper: 'frodo-input-wrapper',\n                inputError: 'frodo-err-msg',\n                footer: 'frodo-login-footer',\n                linksWrapper: 'frodo-links',\n                forgot: 'frodo-forgot',\n                signUp: 'frodo-sign-up',\n                submit: 'frodo-btn-submit'\n            },\n            log: 'frodo-log-with',\n            social: 'frodo-social',\n            //Helpers\n            frodoVisible: 'frodo-visible',\n            hideClass: 'frodo-hide',\n            noScroll: 'frodo-no-scroll',\n            //Error class\n            errorClass: {\n                input: 'frodo-err-input',\n                msg: 'frodo-err-msg'\n            },\n\n            //Form settings\n            method: 'get',\n            submitUrl: '?',\n            forgotLink: '#',\n            signUpLink: '#'\n        },\n\n        /*\n        TRANSLATIONS\n         */\n        translation : {\n            'en': {\n                loginTxt: 'Log in',\n                signUpTxt: 'Sign up',\n                resetTxt: 'Password Reset',\n                userPlaceholder: 'Fullname',\n                passPlaceholder: 'Password',\n                passConfirmPlaceholder: 'Confirm password',\n                emailPlaceholder: 'Email',\n                emailResetPlaceholder: 'Your email address',\n                links: ['Forgot your password ?', 'Sign up now', 'Log in now'],\n                login: 'Submit',\n                logWith: 'or',\n                //Errors\n                errors: {\n                    email: 'Invalid email address format',\n                    password: 'Password should be at least 8 characters',\n                    passwordNotMatch: 'Passwords don\\'t match',\n                    fullname: 'Invalid username'\n                }\n\n            },\n            'se': {\n                loginTxt: 'Logga in',\n                signUpTxt: 'Skapa nytt konto',\n                resetTxt: 'E-postadress Återställning',\n                userPlaceholder: 'För och efternamn',\n                passPlaceholder: 'Lösenord',\n                passConfirmPlaceholder: 'Bekräfta lösenord',\n                emailPlaceholder: 'E-postadress',\n                emailResetPlaceholder: 'Din E-postadress',\n                links: ['Glömt lösenord?', 'Skapa nytt konto', 'Logga in'],\n                login: 'Skicka',\n                logWith: 'eller',\n                //Errors\n                errors: {\n                    email: 'Ogiltig E-mailadress',\n                    password: 'Lösenord skall innehålla minst åtta tecken',\n                    passwordNotMatch: 'De använda lösernorden stämmer inte med varandra',\n                    fullname: 'Ogiltigt användarnamn'\n                }\n            },\n            'dk': {\n                loginTxt: 'Log ind',\n                signUpTxt: 'Opret ny konto',\n                resetTxt: 'Nulstil adgangskode',\n                userPlaceholder: 'For-og efternavn',\n                passPlaceholder: 'Adgangskode',\n                passConfirmPlaceholder: 'Bekræft adgangskode',\n                emailPlaceholder: 'Mailadresse',\n                emailResetPlaceholder: 'Din mailadresse',\n                links: ['Glemt adgangskode?', 'Opret ny konto', 'Log ind'],\n                login: 'Send',\n                logWith: 'eller',\n                //Errors\n                errors: {\n                    email: 'Ugyldig mailadresse',\n                    password: 'Adgangskode skal indeholde mindst otte tegn',\n                    passwordNotMatch: 'De indtastede adgangskoder er ikke ens',\n                    fullname: 'Ugyldigt brugernavn'\n                }\n            },\n            'no': {\n                loginTxt: 'Logg inn',\n                signUpTxt: 'Opprett ny konto',\n                resetTxt: 'Nullstill passord',\n                userPlaceholder: 'For- og etternavn',\n                passPlaceholder: 'Passord',\n                passConfirmPlaceholder: 'Bekreft passord',\n                emailPlaceholder: 'E-postadresse',\n                emailResetPlaceholder: 'Din e-postadresse',\n                links: ['Glemt passordet ditt ?', 'Opprett ny konto', 'Logg inn'],\n                login: 'Send',\n                logWith: 'eller',\n                //Errors\n                errors: {\n                    email: 'Ugyldig e-postadresse',\n                    password: 'Passordet må være på minst åtte tegn',\n                    passwordNotMatch: 'Passordet matcher ikke inntastet passord',\n                    fullname: 'Ugyldig brukernavn'\n                }\n            },\n            'ar': {\n                loginTxt: 'تسجيل دخول',\n                signUpTxt: 'تسجيل',\n                resetTxt: 'إعادة تعيين كلمة المرور',\n                userPlaceholder: 'الاسم الكامل',\n                passPlaceholder: 'كلمة المرور',\n                passConfirmPlaceholder: 'تأكيد كلمة المرور',\n                emailPlaceholder: 'بريد إلكتروني',\n                emailResetPlaceholder: 'عنوان بريدك الإلكتروني',\n                links: ['هل نسيت كلمة المرور؟', 'التسجيل الآن', 'تسجيل الدخول الآن'],\n                login: 'اعتماد',\n                logWith: 'أو',\n                //Errors\n                errors: {\n                    email: ' تنسيق عنوان البريد الإلكتروني غير صحيح',\n                    password: 'يجب أن تتكون كلمة المرور من 8 حروف على الأقل',\n                    passwordNotMatch: 'كلمة المرور غير متطابقة',\n                    fullname: 'اسم المستخدم غير صحيح'\n                }\n            }\n        },\n        /*\n        SOCIAL BUTTONS\n        */\n        socialBtn : {\n            'eniro': {\n                text: 'Eniro',\n                link: 'https://accounts.eniro.com.test.eniro.net/frodo/oauth/eniro/authorize?response_type=code&client_id={client_id}&scope={scope}&redirect_uri={redirect_uri}'\n            },\n            'facebook': {\n                text: 'Facebook',\n                link: 'https://accounts.eniro.com.test.eniro.net/frodo/oauth/facebook/authorize?response_type=code&client_id={client_id}&scope={scope}&redirect_uri={redirect_uri}'\n            },\n            'google' : {\n               text: 'Google',\n                link: 'https://accounts.eniro.com.test.eniro.net/frodo/oauth/google/authorize?response_type=code&client_id={client_id}&scope={scope}&redirect_uri={redirect_uri}'\n            }\n        }\n        //END PRIVATE\n    };\n\n    /*\n    -------------------C O N S T R U C T O R BEGIN-------------------------------------------------------\n     */\n    function Frodo(element, options) {\n        //Assign this to variable in order to use it also in callback functions\n        var frodo = this,\n            //Shorthand for frodo.config\n            config,\n            lang,\n            body;\n\n        //User options\n        frodo.defaults_provider = Private.defaults.provider;\n        frodo.options_provider = options.provider;\n\n        //Config object\n        frodo.config = config = $.extend(true, {}, Private.defaults, options);\n\n        //Element we call a function on\n        frodo.element = element;\n\n        //Set language\n        var defaultLang = Object.keys(Private.translation[Private.defaults.lang]),\n            configLang = (typeof Private.translation[config.lang] !== 'undefined') ? Object.keys(Private.translation[config.lang]) : void 0;\n\n        frodo.lang = ((typeof configLang === 'undefined') || (defaultLang.length !== configLang.length)) ? Private.defaults.lang : config.lang;\n\n\n        //Shorthand for config.body\n        frodo.body = body = Private.frodoConfig.body;\n        // body = config.body;\n\n        /*\n-----------------------------E V E N T  H A N D L E R S BEGIN----------------------------------------------------------\n */\n\n        /*\n-----------------------------OPEN LOGIN PANEL--------------------------------------------------------------------\n */\n        frodo.element.on('click', function(event) {\n\n            //Prevent default behaviour\n            frodo.stopEvent(event);\n\n            //Reset frodo, wrapper and overlay classes\n            frodo.resetMainClasses(true);\n\n            //Reset err message\n            frodo.showAlert(null, {\n                messageBox: Private.frodoConfig.frodoLogin.message,\n                text: Private.frodoConfig.frodoLogin.message + ' > span',\n                alert: Private.frodoConfig.frodoLogin.messageAlert\n            });\n\n            //Rest form to login\n            frodo.toggleForm('init');\n\n            //Clear errors\n            frodo.clearErrors();\n\n            //Clear inputs\n            frodo.clearInputs();\n\n            //Enable submit btn\n            frodo.submitDisabled(false);\n\n            //Set focus on first not disabled input\n            frodo.focusFirst();\n        });\n\n        /*\n-----------------------------CLOSE LOGIN PANEL--------------------------------------------------------------------\n */\n        if (config.device === 'desktop') {\n            //Close login panel\n            $(body).on('click', '.' + Private.frodoConfig.frodoHeader.closeBtn, function() {\n                frodo.closePanel();\n            });\n\n            $(body).on('keyup', function(event) {\n                //If 'Escape' key is pressed\n                if (event.keyCode === 27 && Private.frodoConfig.currentForm !== null) {\n                    frodo.closePanel();\n                }\n            });\n        }\n\n        /*\n-----------------------------REGISTER FORM HANDLER-----------------------------------------------------------------\n */\n        $(body).on('click', '.' + Private.frodoConfig.frodoLogin.signUp, function(event) {\n            frodo.stopEvent(event);\n            frodo.toggleForm('signup');\n            frodo.clearErrors();\n            frodo.submitDisabled(false);\n\n            //Set focus on first not disabled input\n            frodo.focusFirst();\n        });\n        /*\n-----------------------------RESET FORM HANDLER-----------------------------------------------------------------\n */\n        $(body).on('click', '.' + Private.frodoConfig.frodoLogin.forgot, function(event) {\n            frodo.stopEvent(event);\n            frodo.toggleForm('reset');\n            frodo.clearErrors();\n            frodo.submitDisabled(false);\n\n            //Set focus on first not disabled input\n            frodo.focusFirst();\n        });\n\n        /*\n-----------------------------FORM VALIDATION HANDLER --------------------------------------------------------\n */\n        $(body).on('input', 'input', function(event) {\n            //If user press 'enter'\n            if (event.which == 13 || event.keyCode == 13) {\n                $('.' + Private.frodoConfig.frodoForm).trigger('submit');\n            }\n            frodo.submitDisabled(true);\n            frodo.validate(event);\n            frodo.stopEvent(event);\n\n        });\n        $(body).on('submit', '.' + Private.frodoConfig.frodoForm, function(event) {\n            frodo.stopEvent(event);\n            frodo.validate(event);\n            //Ajax submit\n        });\n\n        /*\n-----------------------------AJAX FORM VALIDATION-----------------------------------------------------------------\n */\n        // TEMP - Ajax - jsonp\n        $(body).on('click', '.frodo-btn', function() {\n            var url = 'http://jurczynski.czest.pl/registerFailed.json?callback=myCallback',\n                url2 = 'http://jurczynski.czest.pl/registerSuccess.json?callback=myCallback',\n                address = [url, url2],\n                index;\n\n            index = frodo.getRandomInt(0, address.length - 1);\n\n            $.ajax({\n                type: 'GET',\n                url: address[index],\n                dataType: 'jsonp',\n                jsonpCallback: 'myCallback'\n            }).then(function(response) {\n                frodo.showAlert(response, {\n                    messageBox: Private.frodoConfig.frodoLogin.message,\n                    text: Private.frodoConfig.frodoLogin.message + '> span',\n                    alert: Private.frodoConfig.frodoLogin.messageAlert\n                });\n            });\n        });\n\n        /*\n-----------------------------E V E N T  H A N D L E R S  E N D-------------------------------------------------------\n */\n\n        /*\n        ---------------------------------------------------------------------------------------------------------------\n         */\n        //INITIALIZE PLUGIN\n        frodo.init();\n    }\n    /*\n    -------------------C O N S T R U C T O R  END----------------------------------------------------\n     */\n\n    /*\n    -------------------M E T H O D S  BEGIN --------------------------------------------------\n     */\n\n    Frodo.prototype.init = function() {\n        //Shorthand for this.config\n        var config = this.config,\n            lang = this.lang,\n            frodo = $('#' + Private.frodoConfig.frodoWrapper),\n            inputs = [],\n            def_providers = this.defaults_provider,\n            opt_providers = this.options_provider,\n            el = {},\n            providers = [],\n            keys = null;\n\n        //CACHED OBJECTS\n        el = {\n            //Main elemenets\n            wrapper: $('<div/>', {\n                id: Private.frodoConfig.frodoWrapper\n            }),\n            overlay: $('<div/>', {\n                class: (config.device === 'desktop') ? Private.frodoConfig.frodoOverlay : ''\n            }),\n            frodo: $('<div/>', {\n                id: Private.frodoConfig.frodo,\n                class: Private.frodoConfig.frodo\n            }),\n            form: $('<form/>', {\n                class: Private.frodoConfig.frodoForm,\n                action: Private.frodoConfig.submitUrl,\n                method: Private.frodoConfig.method,\n                name: Private.frodoConfig.frodoForm,\n                novalidate: true\n            }),\n\n            //Header\n            header: $('<h3/>', {\n                class: Private.frodoConfig.frodoHeader.header\n            }),\n            headerTxt: $('<span/>', {\n                class: Private.frodoConfig.frodoHeader.text,\n                html: Private.translation[lang].loginTxt\n            }),\n            closeBtn: $('<button/>', {\n                class: Private.frodoConfig.frodoHeader.closeBtn,\n                type: 'button',\n                html: 'x'\n            }),\n\n            //Login form\n            loginBox: $('<div/>', {\n                class: Private.frodoConfig.frodoLogin.box\n            }),\n            message: $('<div/>', {\n                id: Private.frodoConfig.frodoLogin.message,\n                class: Private.frodoConfig.frodoLogin.message\n            }).append($('<span/>')),\n            inputWrapper: $('<div/>', {\n                    class: Private.frodoConfig.frodoLogin.inputWrapper\n                })\n                .append($('<span/>', {\n                    class: Private.frodoConfig.frodoLogin.inputError\n                })),\n            input: {\n                fullname: $('<input/>', {\n                    type: 'text',\n                    name: 'fullname',\n                    class: Private.frodoConfig.frodoLogin.input + ' ' + Private.frodoConfig.hideClass,\n                    placeholder: Private.translation[lang].userPlaceholder,\n                    disabled: true\n                }),\n                email: $('<input/>', {\n                    type: 'email',\n                    name: 'email',\n                    class: Private.frodoConfig.frodoLogin.input,\n                    placeholder: Private.translation[lang].emailPlaceholder\n                }),\n                password: $('<input/>', {\n                    id: 'firstPassword',\n                    class: Private.frodoConfig.frodoLogin.input,\n                    type: 'password',\n                    name: 'password',\n                    'data-if-match': '#secondPassword',\n                    placeholder: Private.translation[lang].passPlaceholder\n                }),\n                passwordConfirm: $('<input/>', {\n                    id: 'secondPassword',\n                    class: Private.frodoConfig.frodoLogin.input + ' ' + Private.frodoConfig.hideClass,\n                    type: 'password',\n                    name: 'passwordConfirm',\n                    placeholder: Private.translation[lang].passConfirmPlaceholder,\n                    'data-if-match': '#firstPassword',\n                    disabled: true\n                }),\n                passwordReset: $('<input/>', {\n                    type: 'email',\n                    name: 'passwordReset',\n                    class: Private.frodoConfig.frodoLogin.input + ' ' + Private.frodoConfig.hideClass,\n                    placeholder: Private.translation[lang].emailResetPlaceholder,\n                    disabled: true\n                })\n\n            },\n            loginFooter: $('<div/>', {\n                class: Private.frodoConfig.frodoLogin.footer\n            }),\n            frodoLinksWrapper: $('<div/>', {\n                class: Private.frodoConfig.frodoLogin.linksWrapper\n            }),\n            forgotLink: $('<a/>', {\n                href: Private.frodoConfig.forgotLink,\n                class: Private.frodoConfig.frodoLogin.forgot,\n                html: Private.translation[lang].links[0]\n            }),\n            signUpLink: $('<a/>', {\n                href: Private.frodoConfig.signUpLink,\n                class: Private.frodoConfig.frodoLogin.signUp,\n                html: Private.translation[lang].links[1]\n            }),\n            submitBtn: $('<button/>', {\n                class: Private.frodoConfig.frodoLogin.submit,\n                type: 'submit',\n                html: Private.translation[lang].login\n            }),\n\n            //Social\n            logWith: $('<span/>', {\n                class: Private.frodoConfig.log,\n                html: Private.translation[lang].logWith\n            }),\n            socialWrapper: $('<div/>', {\n                class: Private.frodoConfig.social\n            })\n        };\n\n        /**\n         * CREATING HTML STRUCTURE\n         */\n\n        //Check if there is only one instace of plugin\n        if (frodo.length === 0) {\n\n            //Wrap all content with frodo wrapper, and append frodo container and overlay\n            $(Private.frodoConfig.body).wrapInner(el.wrapper).\n            find('#' + Private.frodoConfig.frodoWrapper).\n            append(el.frodo.append(el.form), el.overlay);\n\n            //Insert form header\n            if (config.device === 'desktop') {\n                el.header.append(el.headerTxt, el.closeBtn);\n            } else {\n                el.header.append(el.headerTxt);\n            }\n\n            $('.' + Private.frodoConfig.frodoForm).append(el.header);\n\n            //Additional funcionality for widget advanced version\n            if (config.version === 'advanced') {\n\n                //Append login box\n                el.frodoLinksWrapper.append(el.forgotLink, el.signUpLink);\n                el.loginFooter.append(el.frodoLinksWrapper, el.submitBtn);\n\n                //Create array of all inputs\n                keys = Object.keys(el.input);\n\n                for (var i = 0, len = keys.length; i < len; i++) {\n                    inputs.push(el.input[keys[i]]);\n                }\n\n                //Wrap each input with wrapper\n                inputs = inputs.map(function(input) {\n                    return el.inputWrapper.clone().prepend(input);\n                });\n                //Finally append everything into box\n                el.loginBox.append(el.message, inputs, el.loginFooter);\n                $('.' + Private.frodoConfig.frodoForm).append(el.loginBox);\n\n                //Append log with text\n                $('.' + Private.frodoConfig.frodoForm).append(el.logWith);\n\n            }\n\n            //Append social buttons\n            el.socialWrapper.each(function() {\n                var btns = '',\n                    version = config.version,\n                    //Set provider either from config or from option\n                    // provider = options.provider || config.provider,\n                    provider = config.provider,\n                    providerClass = (config.device === 'desktop') ? Private.frodoConfig.frodoLogin.frodoProvider : Private.frodoConfig.frodoLogin.frodoProvider + ' ' + Private.frodoConfig.frodoLogin.frodoProviderMobile,\n                    defaults_provider = def_providers,\n                    options_provider = opt_providers,\n                    result_provider = defaults_provider.slice();\n\n                //Aggregate providers from config and options\n                if (options_provider) {\n\n                    options_provider.forEach(function(opt_name) {\n                        result_provider.forEach(function(conf_name) {\n                            if (opt_name !== conf_name && result_provider.indexOf(opt_name) === -1) {\n                                result_provider.push(opt_name);\n                            }\n\n                        });\n                    });\n                }\n                // console.log('Result providers: ', result_provider);\n\n\n                //If 'advanced' version is selected than skip eniro button\n                if (version === 'advanced') {\n                    result_provider.forEach(function(name, index) {\n                        if (name === 'eniro')\n                            result_provider.splice(index, 1);\n                    });\n                }\n\n                    // console.log(social);\n                //Create buttons\n                result_provider.forEach(function(name) {\n                    if (name in Private.socialBtn) {\n                    var link = Private.socialBtn[name].link;\n\n\n                    link = link.replace('{client_id}', config.clientId);\n                    link = link.replace('{scope}', config.scope);\n                    link = link.replace('{redirect_uri}', config.redirectUri);\n\n                    btns += '<div class=\"' + providerClass + '\" \">\\\n                                    <a class=\"frodo-btn frodo-btn-' + name + '\" \\\n                                     href=\"' + link + '\">\\\n                                    <i class=\"fa faa-' + name + '\"></i>' + Private.socialBtn[name].text + '</a>\\\n                                    </div>';\n                    }\n                });\n\n                $(this).append(btns);\n            });\n            $('.' + Private.frodoConfig.frodoForm).append(el.socialWrapper);\n\n            //Set value of current form\n            Private.frodoConfig.currentForm = Private.frodoConfig.forms[0];\n\n            console.log('Login panel created');\n        } else {\n            return false;\n        }\n\n    };\n\n    Frodo.prototype.stopEvent = function(e) {\n        var e = e || window.event;\n\n        e.preventDefault();\n        e.stopPropagation();\n    };\n\n\n    Frodo.prototype.resetMainClasses = function(state) {\n        $('.' + Private.frodoConfig.frodoOverlay).toggleClass(Private.frodoConfig.frodoVisible, state);\n        $('#' + Private.frodoConfig.frodo).toggleClass(Private.frodoConfig.frodoVisible, state);\n        $('#' + Private.frodoConfig.frodoWrapper).addClass(Private.frodoConfig.noScroll, state);\n\n        return true;\n    };\n\n    Frodo.prototype.clearErrors = function() {\n        var loginBox = $('.' + Private.frodoConfig.frodoLogin.box),\n            errMsg = Private.frodoConfig.errorClass.msg,\n            errInput = Private.frodoConfig.errorClass.input,\n            input = loginBox.find('.' + errInput),\n            msg = loginBox.find('.' + errMsg);\n\n        input.removeClass(errInput);\n        msg.text('').removeClass(errMsg);\n\n        return true;\n    };\n\n    Frodo.prototype.focusFirst = function() {\n        return $('.' + Private.frodoConfig.frodoLogin.input).first().focus();\n    };\n\n    //Change submit button disabled state\n    Frodo.prototype.submitDisabled = function(bool) {\n        var submitBtn = $('.' + Private.frodoConfig.frodoLogin.submit);\n\n        return submitBtn.prop('disabled', bool);\n    };\n\n    Frodo.prototype.validate = function(event) {\n\n        /**\n         * HELPERS\n         */\n        //Get input name\n        function getInputName() {\n            return input.attr('name');\n        }\n        //Get input type\n        function getInputType() {\n            return input.attr('type');\n        }\n        //Chek input type\n        function checkInputType(name) {\n            return getInputType() === name;\n        }\n        //Get input value\n        function getInputValue(input) {\n            return input.val();\n        }\n        //Get input length\n        function getInputLength(input) {\n            return getInputValue(input).length;\n        }\n\n        function inputIsEmpty(input) {\n            var val = getInputLength(input);\n\n            return !val;\n        }\n        /**\n         * VALIDATORS\n         */\n        //Validate email\n        function checkEmail(email) {\n            var pattern = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n            return pattern.test(getInputValue(email));\n        }\n        //Validate password\n        function checkPassword(password) {\n            var val = getInputLength(password);\n\n            if (val < 8 || inputIsEmpty(password))\n                return false;\n            else\n                return true;\n        }\n\n        function anyInputEmpty() {\n            var anyEmpty = $('.' + Private.frodoConfig.frodoLogin.box).find('.' + Private.frodoConfig.frodoLogin.input).not(':disabled').filter(function() {\n                    return !$(this).val();\n                }),\n                errMsg = anyEmpty.find('span');\n            //if submit btn\n            if (getInputName() === Private.frodoConfig.frodoForm) {\n                anyEmpty.each(function() {\n                    var input = $(this),\n                        errMsg = $('span', input.parent()),\n                        type = input.attr('type'),\n                        errors = Private.translation[lang].errors;\n\n                    if (type === 'text') {\n                        input.addClass(Private.frodoConfig.errorClass.input);\n                        errMsg.text(errors.fullname).addClass(Private.frodoConfig.errorClass.msg);\n                    } else if (type === 'password') {\n                        input.addClass(Private.frodoConfig.errorClass.input);\n                        errMsg.text(errors.password).addClass(Private.frodoConfig.errorClass.msg);\n                    } else if (type === 'email') {\n                        input.addClass(Private.frodoConfig.errorClass.input);\n                        errMsg.text(errors.email).addClass(Private.frodoConfig.errorClass.msg);\n                    }\n                });\n            }\n\n            return anyEmpty.length;\n        }\n\n        function setErrors(bool, name) {\n            var errors = Private.translation[lang].errors,\n                errName = errors[name];\n\n            if (bool) {\n                input.addClass(Private.frodoConfig.errorClass.input);\n                error.text(errName).addClass(Private.frodoConfig.errorClass.msg);\n            } else {\n                input.removeClass(Private.frodoConfig.errorClass.input);\n                error.text('').removeClass(Private.frodoConfig.errorClass.msg);\n            }\n        }\n        //Check for passwords match (only in case of singup form)\n        function passwordsMatch(password) {\n\n            var ifMatch = password.data('if-match'),\n                currentVal = getInputValue(password),\n                matchVal = $(ifMatch).val(),\n                allErrors = $('[data-if-match]', $('.' + Private.frodoConfig.frodoForm)).siblings('span');\n\n            //Compare only if match password is >= 8\n            if (matchVal.length >= 8) {\n                //Compare values\n                if (currentVal !== matchVal) {\n                    error.text(Private.translation[lang].errors.passwordNotMatch).addClass(Private.frodoConfig.errorClass.msg);\n                    frodo.submitDisabled(true);\n                } else {\n                    allErrors.text('').removeClass(Private.frodoConfig.errorClass.msg);\n                    validateInput();\n                }\n            }\n        }\n        //Check if there is no empty inputs or error messages\n        function validateInput() {\n\n            if (errors < 1 && anyInputEmpty() === 0) {\n                return frodo.submitDisabled(false);\n            } else {\n                return frodo.submitDisabled(true);\n            }\n        }\n\n        var frodo = this,\n            config = this.config,\n            lang = this.lang,\n            input = $(event.target),\n            errors = null,\n            anyEmpty = null,\n            submitBtn = $('.' + Private.frodoConfig.frodoLogin.submit),\n            valid = false,\n            error = $('span', input.parent());\n\n        //If submit button was clicked\n        if (getInputName() === Private.frodoConfig.frodoForm) {\n            validateInput();\n        }\n\n\n        //Email\n        if (checkInputType('email')) {\n\n            // If email is wrong\n            if (!checkEmail(input)) {\n                setErrors(true, 'email');\n            } else {\n                setErrors(false, 'email');\n                errors = $('.' + Private.frodoConfig.errorClass.input).length;\n                validateInput();\n            }\n        }\n\n        //All passwords\n        if (checkInputType('password')) {\n\n            //If any error occurs\n            if (!checkPassword(input)) {\n                setErrors(true, 'password');\n                //Check for passwords match (only in case of singup form)\n                if (Private.frodoConfig.currentForm === Private.frodoConfig.forms[1]) {\n                    passwordsMatch(input);\n                }\n            } else {\n                setErrors(false, 'password');\n                errors = $('.' + Private.frodoConfig.errorClass.input).length;\n                //Check for passwords match (only in case of singup form)\n                validateInput();\n                if (Private.frodoConfig.currentForm === Private.frodoConfig.forms[1]) {\n                    passwordsMatch(input);\n                }\n            }\n        }\n\n        //Fullname\n        if (checkInputType('text')) {\n            if (inputIsEmpty(input)) {\n                setErrors(true, 'fullname');\n            } else {\n                setErrors(false, 'password');\n                errors = $('.' + Private.frodoConfig.errorClass.input).length;\n                validateInput();\n            }\n        }\n    };\n\n    /**\n     * [toggleForm switch forms]\n     * @param  {[string]} form [form name]\n     * @return {[boolean]}\n     * */\n    Frodo.prototype.toggleForm = function(form) {\n\n        function changeTxt(selector, text) {\n\n            $(selector).text(text);\n\n            return true;\n        }\n\n        function aggregateInputs(obj) {\n            var inputs = [],\n                keys = Object.keys(obj);\n\n            for (var i = 0, len = keys.length; i < len; i++) {\n                inputs.push(obj[keys[i]]);\n            }\n\n            return inputs;\n        }\n\n        function toggleInputs(inputs, arr) {\n            inputs.map(function(value) {\n                if (arr.indexOf(value) !== -1)\n                    $('.frodo-input[name=\"' + value + '\"]').removeClass(Private.frodoConfig.hideClass).prop('disabled', false);\n                else\n                    $('.frodo-input[name=\"' + value + '\"]').addClass(Private.frodoConfig.hideClass).prop('disabled', true);\n            });\n\n            return true;\n        }\n\n        function objToArray(obj) {\n            var arr = [];\n\n            obj.each(function() {\n                return arr.push($(this).attr('name'));\n            });\n\n            return arr;\n        }\n\n        //Shorthand for this.config\n        var config = this.config,\n            text = Private.translation[this.lang],\n            inputsObj = $('.frodo-input'),\n            init = [inputsObj.filter('[name=\"email\"]').attr('name'), inputsObj.filter('[name=\"password\"]').attr('name')],\n            signup = [inputsObj.filter('[name=\"fullname\"]').attr('name'), inputsObj.filter('[name=\"email\"]').attr('name'), inputsObj.filter('[name=\"password\"]').attr('name'), inputsObj.filter('[name=\"passwordConfirm\"]').attr('name')],\n            reset = [inputsObj.filter('[name=\"passwordReset\"]').attr('name')],\n            inputs = objToArray(inputsObj),\n            headerTxt = $('.' + Private.frodoConfig.frodoHeader.text),\n            signUpTxt = $('.' + Private.frodoConfig.frodoLogin.signUp);\n\n\n        //Delete alert message\n        this.showAlert(null, {\n            messageBox: Private.frodoConfig.frodoLogin.message,\n            text: Private.frodoConfig.frodoLogin.message + ' > span',\n            alert: Private.frodoConfig.frodoLogin.messageAlert\n        });\n\n        //Clear form inputs\n        this.clearInputs();\n\n        //Check which form is used\n        if (form === 'signup') {\n            //Check if is either login or reset form, switch to signup\n            if (headerTxt.text() === text.loginTxt || headerTxt.text() === text.resetTxt) {\n                toggleInputs(inputs, signup);\n                changeTxt(headerTxt, text.signUpTxt);\n                changeTxt(signUpTxt, text.links[2]);\n                Private.frodoConfig.currentForm = Private.frodoConfig.forms[1];\n\n                //Switch to login\n            } else {\n                toggleInputs(inputs, init);\n                changeTxt(headerTxt, text.loginTxt);\n                changeTxt(signUpTxt, text.links[1]);\n                Private.frodoConfig.currentForm = Private.frodoConfig.forms[0];\n            }\n        }\n        //Form reset password\n        else if (form === 'reset') {\n            toggleInputs(inputs, reset);\n            changeTxt(headerTxt, text.resetTxt);\n            changeTxt(signUpTxt, text.links[1]);\n            Private.frodoConfig.currentForm = Private.frodoConfig.forms[2];\n        }\n\n        //Form login, init state\n        else if (form === 'init') {\n            toggleInputs(inputs, init);\n            changeTxt(headerTxt, text.loginTxt);\n            changeTxt(signUpTxt, text.links[1]);\n            Private.frodoConfig.currentForm = Private.frodoConfig.forms[0];\n        }\n\n        return true;\n    };\n\n    /**\n     * [showAlert show message above the form]\n     * @param  {[object]} data\n     * @param  {[object]} box\n     * @param  {[object]} text\n     * @return {[boolean]}\n     */\n    Frodo.prototype.showAlert = function(data, options) {\n        if (data === undefined) {\n            data = false;\n        }\n\n        if (data) {\n            if (data.fail) {\n                $('#' + options.messageBox).addClass(options.alert);\n                $('.' + options.text).empty().text(data.message);\n            } else {\n                $('#' + options.messageBox).removeClass(options.alert);\n                $('.' + options.text).empty();\n            }\n        } else {\n            $('#' + options.messageBox).removeClass(options.alert);\n            $('.' + options.text).empty();\n        }\n\n        return true;\n    };\n\n    /**\n     * [closePanel close login panel]\n     * @return {[boolean]}\n     */\n    Frodo.prototype.closePanel = function() {\n        this.resetMainClasses(false);\n        this.clearInputs();\n        this.submitDisabled(false);\n        Private.frodoConfig.currentForm = null;\n\n        return true;\n    };\n\n    /**\n     * [clearInputs - clear form input]\n     * @return {[boolean]}\n     */\n    Frodo.prototype.clearInputs = function() {\n        $('.' + Private.frodoConfig.frodoLogin.input).each(function() {\n            this.value = '';\n        });\n\n        return true;\n    };\n\n\n    //TEMP - shuffle random url\n    Frodo.prototype.getRandomInt = function(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    };\n    /*\n    -------------------M E T H O D S  END --------------------------------------------------\n     */\n\n    $.fn.frodo = function(options) {\n            new Frodo(this, options);\n        // return this.each(function() {\n        // });\n        //\n        return this;\n    };\n\n})(jQuery);\n\n\n"],"file":"jquery.frodo.js","sourceRoot":"/source/"}